<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://waynexucn.github.io//feed/by_tag/Ubuntu.xml" rel="self" type="application/atom+xml"/><link href="https://waynexucn.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-05T07:44:16+00:00</updated><id>https://waynexucn.github.io//feed/by_tag/Ubuntu.xml</id><title type="html">Wenjie Xu</title><subtitle>Wenjie Xu&apos;s home page. feedId:113833929030099968+userId:72841831310508032 </subtitle><entry><title type="html">工作环境系统实用配置记录</title><link href="https://waynexucn.github.io//blog/2024/%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/" rel="alternate" type="text/html" title="工作环境系统实用配置记录"/><published>2024-09-24T19:36:53+00:00</published><updated>2024-09-24T19:36:53+00:00</updated><id>https://waynexucn.github.io//blog/2024/%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95</id><content type="html" xml:base="https://waynexucn.github.io//blog/2024/%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E5%AE%9E%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"><![CDATA[<blockquote> <p>2025.02.16：将工作环境迁移至 Mac Os，因为我用的软件大多为开源或多平台的，且 Scoop 的用法与 Homebrew 类似，各种配置可以很快速的从 Windows 迁移至 Mac OS，具体操作不再记录</p> </blockquote> <h3 id="scoop-包管理器">Scoop 包管理器</h3> <p><a href="https://scoop.sh/">Scoop</a> 是我在 Windows 平台上最顺手的软件（包）管理器，可以很方便的在命令行中安装我的熟悉的软件。它有以下特点：</p> <ul> <li>消除权限弹出窗口</li> <li>防止安装大量程序导致的 PATH 污染</li> <li>避免安装和卸载程序时出现意外的副作用</li> <li>自动查找并安装依赖项</li> <li>自动执行所有额外的设置步骤以获得一个可运行的程序</li> </ul> <p>我可以用它简单且直接的安装 oh-my-posh、nodejs、pipx、ffmpeg、7zip、aria2、fastfetch 等一系列小程序，仅需要以下命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scoop <span class="nb">install </span>nodejs-lts
</code></pre></div></div> <p>甚至可以用它安装 VS Code（需要添加 extras buckets）:</p> <pre><code class="language-poershell">scoop bucket add extras
scoop install vscode
</code></pre> <p>安装 nerd fonts 系列的字体（需要添加 nerd-fonts buckets）:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scoop bucket add nerd-fonts
scoop <span class="nb">install </span>Cascadia-Code
</code></pre></div></div> <p>需要注意，使用 Scoop 管理工具时，Scoop 会将已安装的多个版本的应用保存在各自的文件夹中，以便随时切换和回退到以前的版本。</p> <p>例如，可以通过文件管理器直接查看<code class="language-plaintext highlighter-rouge">C:\Users\Xu\scoop\apps\oh-my-posh</code>文件夹，里面应该有多个以版本号命名的子文件夹。当前激活的版本会显示在<code class="language-plaintext highlighter-rouge">current</code>目录中。可以通过文件管理器查看<code class="language-plaintext highlighter-rouge">C:\Users\Xu\scoop\apps\oh-my-posh\current</code>是指向哪个版本的符号链接。</p> <p>手动删除不需要的旧版本子文件夹。例如，如果看到有 7.68.0 和 7.69.1 两个文件夹，而只想保留最新的 7.69，可以进入<code class="language-plaintext highlighter-rouge">C:\Users\Xu\scoop\apps\oh-my-posh</code>目录 删除旧版本文件夹（如 7.68.0）。或者直接使用命令自动清理未使用的旧版本文件：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scoop cleanup oh-my-posh
<span class="c"># 清除所有软件的旧版本</span>
scoop cleanup <span class="k">*</span>
<span class="c"># 清楚安装包缓存</span>
scoop cache <span class="nb">rm</span> <span class="k">*</span>
</code></pre></div></div> <p>这样，每次更新后 Scoop 会自动删除旧版本。</p> <p>附上我使用 scoop 安装的软件：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Name                   Version            Source Updated             Info
<span class="nt">----</span>                   <span class="nt">-------</span>            <span class="nt">------</span> <span class="nt">-------</span>             <span class="nt">----</span>
7zip                   24.09              main   2024-12-02 16:34:26
aria2                  1.37.0-1           main   2024-11-11 21:58:04
btop                   1.0.4              main   2024-07-17 21:29:16
btop-lhm               1.0.4              main   2024-07-17 21:29:25
draw.io                25.0.2             extras 2024-12-05 15:24:34
everything             1.4.1.1026         extras 2024-12-04 14:25:38
fastfetch              2.33.0             main   2024-12-28 23:17:29
fd                     10.2.0             main   2024-12-22 12:47:35
ffmpeg                 7.1                main   2024-10-20 18:21:52
fzf                    0.57.0             main   2024-12-22 12:47:39
geekuninstaller        1.5.2.165          extras 2024-12-03 16:21:50
gh                     2.64.0             main   2024-12-22 12:57:21
ghostscript            10.04.0            main   2024-12-22 12:49:34
git                    2.47.1             main   2024-12-02 16:46:01
imagemagick            7.1.1-43           main   2024-12-25 22:26:47
innounp                1.76               main   2024-11-14 10:58:02
jid                    0.7.6              main   2024-12-22 12:49:50
jq                     1.7.1              main   2024-12-22 12:47:28
mingw                  14.2.0-rt_v12-rev0 main   2024-12-05 15:37:08
mongodb                8.0.4              main   2024-12-08 12:22:01
mongodb-compass        1.45.0             extras 2024-12-05 15:24:52
mongodb-database-tools 100.10.0           main   2024-12-02 17:10:50
mongosh                2.3.7              extras 2024-12-22 12:57:28
motrix                 1.8.19             extras 2024-12-02 17:45:13
nodejs-lts             22.12.0            main   2024-12-05 15:25:03
notepad3               6.24.1221.1        extras 2024-12-22 12:59:44
office-tool-plus       10.19.8.0          extras 2024-12-22 12:59:49
oh-my-posh             24.17.1            main   2024-12-25 22:26:58
openjdk21              21.0.2-13          java   2024-12-05 15:46:33
pandoc                 3.6.1              main   2024-12-25 22:27:12
picgo                  2.3.1              extras 2024-12-02 17:32:48
pipx                   1.7.1              main   2024-12-13 20:38:34
pnpm                   9.15.2             main   2024-12-28 23:17:37
poppler                24.08.0-0          main   2024-12-22 12:47:32
r                      4.4.2              main   2024-12-02 16:39:04
registry-finder        2.59.0.0           extras 2024-12-04 14:15:35
ripgrep                14.1.1             main   2024-12-22 12:47:37
rstudio                2024.12.0-467      extras 2024-12-22 13:00:34
rtools                 4.4.6335.6327      main   2024-12-02 14:16:57
<span class="nb">sudo                   </span>0.2020.01.26       main   2024-09-30 13:16:29
switchhosts            4.2.0.6119         extras 2024-12-02 17:38:16
texstudio              4.8.5              extras 2024-12-14 16:06:48
thorium                128.0.6613.189     extras 2024-12-02 17:36:29
typst                  0.12.0             main   2024-12-05 15:34:13
vcredist2022           14.42.34433.0      extras 2024-12-02 16:56:57
wixtoolset             5.0.2              main   2024-11-14 10:57:52
zoxide                 0.9.6              main   2024-12-22 12:47:42
</code></pre></div></div> <h3 id="fonts">Fonts</h3> <ul> <li>Powershell: ‘CaskaydiaMonoNerdFontMono’</li> <li>VS Code: ‘CaskaydiaMonoNerdFontMono’（英文）, ‘LXGW WenKai Mono’（中文）</li> <li>Office Word: ‘latinmodern-math’ （数学公式）。</li> </ul> <h3 id="nodejs">Node.js</h3> <h4 id="镜像源管理工具-nrm">镜像源管理工具 nrm</h4> <ul> <li>nrm 是一个 npm registry manager，可以帮助用户更方便地管理不同的镜像源。以下是 nrm 的基本使用方式：</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 安装nrm</span>
npm <span class="nb">install </span>nrm <span class="nt">-g</span>
<span class="c"># 列出所有配置的镜像源</span>
nrm <span class="nb">ls</span>
<span class="c"># 添加新的镜像源</span>
nrm add &lt;registry-name&gt; &lt;registry-url&gt;
<span class="c"># 删除镜像源</span>
nrm del &lt;registry-name&gt;
<span class="c"># 切换当前使用的镜像源</span>
nrm use &lt;registry-name&gt;
<span class="c"># 测试所有镜像源的速度</span>
nrm <span class="nb">test</span>
</code></pre></div></div> <h3 id="mongodb">MongoDB</h3> <h4 id="安装">安装</h4> <p>利用 scoop 自动安装 mongodb 及其一系列工具：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scoop bucket add main
scoop <span class="nb">install </span>main/mongodb
scoop <span class="nb">install </span>main/mongodb-database-tools

scoop bucket add extras
scoop <span class="nb">install </span>extras/mongosh
scoop <span class="nb">install </span>extras/mongodb-compass
</code></pre></div></div> <h4 id="配置">配置</h4> <p>通过 Scoop 安装的 MongoDB 默认不会配置为 Windows 服务，但可以手动设置 MongoDB 作为 Windows 服务来实现开机自启。</p> <p>使用 Scoop 检查 MongoDB 安装位置：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scoop prefix mongodb
</code></pre></div></div> <p>mongod shim 使用<code class="language-plaintext highlighter-rouge">$dir\bin\mongod.cfg</code>作为默认配置文件。要使用其他配置文件，请运行<code class="language-plaintext highlighter-rouge">$dir\bin\mongod.exe --config NEW_CONFIG_FILE</code>，<code class="language-plaintext highlighter-rouge">NEW_CONFIG_FILE</code>可以基于<code class="language-plaintext highlighter-rouge">mongod.cfg</code>进行修改，并存放在其他位置。</p> <p>手动启动 MongoDB，如果未创建<code class="language-plaintext highlighter-rouge">data\db</code>和<code class="language-plaintext highlighter-rouge">data\log</code>文件夹（路径可以在<code class="language-plaintext highlighter-rouge">mongod.cfg</code>中固定设置），请先手动创建：：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;路径&gt;<span class="se">\b</span><span class="k">in</span><span class="se">\m</span>ongod.exe <span class="nt">--dbpath</span> <span class="s2">"&lt;路径&gt;</span><span class="se">\d</span><span class="s2">ata</span><span class="se">\d</span><span class="s2">b"</span> <span class="nt">--logpath</span> <span class="s2">"&lt;路径&gt;</span><span class="se">\d</span><span class="s2">ata</span><span class="se">\l</span><span class="s2">og</span><span class="se">\m</span><span class="s2">ongo.log"</span> <span class="nt">--logappend</span>
</code></pre></div></div> <p>打开一个新终端，验证 MongoDB 是否正常启动：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mongosh
</code></pre></div></div> <p>注册 MongoDB 为 Windows 服务：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sc.exe create MongoDB <span class="nv">binPath</span><span class="o">=</span> <span class="s2">"&lt;路径&gt;</span><span class="se">\b</span><span class="s2">in</span><span class="se">\m</span><span class="s2">ongod.exe --service --config &lt;路径&gt;</span><span class="se">\m</span><span class="s2">ongod.cfg"</span> <span class="nv">DisplayName</span><span class="o">=</span> <span class="s2">"MongoDB"</span> <span class="nv">start</span><span class="o">=</span> <span class="s2">"auto"</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">&lt;路径&gt;</code>：Scoop 安装的 MongoDB 路径。</li> <li><code class="language-plaintext highlighter-rouge">--service</code>：指定以服务模式运行。</li> <li><code class="language-plaintext highlighter-rouge">--config</code>：指定 MongoDB 的配置文件路径（可选）。</li> </ul> <p>启动 MongoDB 服务，如果服务启动成功，MongoDB 将在每次系统启动时自动运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>net start MongoDB
</code></pre></div></div>]]></content><author><name></name></author><category term="Productivity"/><category term="Windows"/><category term="Ubuntu"/><category term="Configuration"/><summary type="html"><![CDATA[工作环境的各类实用配置记录]]></summary></entry><entry><title type="html">部署用于学术研究的 Linux 服务器</title><link href="https://waynexucn.github.io//blog/2024/%E9%83%A8%E7%BD%B2%E7%94%A8%E4%BA%8E%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E7%9A%84Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/" rel="alternate" type="text/html" title="部署用于学术研究的 Linux 服务器"/><published>2024-08-24T14:34:28+00:00</published><updated>2024-08-24T14:34:28+00:00</updated><id>https://waynexucn.github.io//blog/2024/%E9%83%A8%E7%BD%B2%E7%94%A8%E4%BA%8E%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E7%9A%84Linux%E6%9C%8D%E5%8A%A1%E5%99%A8</id><content type="html" xml:base="https://waynexucn.github.io//blog/2024/%E9%83%A8%E7%BD%B2%E7%94%A8%E4%BA%8E%E5%AD%A6%E6%9C%AF%E7%A0%94%E7%A9%B6%E7%9A%84Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"><![CDATA[<p>最近，我将一台 MiniPC 改造为一台基于 Ubuntu 操作系统的服务器，配置它以满足未来研究的潜在需求。</p> <p>鉴于我对 Linux 的了解有限，我花了一些时间学习并尝试完成部署，并记录配置步骤、可能出现的问题及其相应的解决方案。</p> <hr/> <h2 id="在-ubuntu-上创建具有管理员权限的新用户">在 Ubuntu 上创建具有管理员权限的新用户</h2> <p>当使用云服务、供应商提供或者自己配置的 Ubuntu 服务器时，会创建一个默认用户（default User）。通常，这个用户可以通过<code class="language-plaintext highlighter-rouge">sudo</code>命令临时提升权限来执行需要管理员权限的任务，但它本质上仍是一个普通用户（不是管理员账户）。如果需要创建一个拥有相同管理员权限的自定义用户，可以按照以下步骤进行：</p> <h3 id="1-创建新用户并指定主目录登录-shell">1. 创建新用户并指定主目录、登录 shell</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>useradd <span class="nt">-d</span> <span class="s2">"/home/&lt;user_name&gt;"</span> <span class="nt">-m</span> <span class="nt">-s</span> <span class="s2">"/bin/bash"</span> &lt;user_name&gt;
</code></pre></div></div> <p>参数说明：</p> <ul> <li><code class="language-plaintext highlighter-rouge">-d "/home/&lt;user_name&gt;"</code>：设置用户的主目录为 <code class="language-plaintext highlighter-rouge">/home/&lt;user_name&gt;</code>。</li> <li><code class="language-plaintext highlighter-rouge">-m</code>：自动创建主目录。</li> <li><code class="language-plaintext highlighter-rouge">-s "/bin/bash"</code>：指定用户的默认登录 shell 为 <code class="language-plaintext highlighter-rouge">/bin/bash</code>。</li> </ul> <h3 id="2-赋予新用户管理员权限">2. 赋予新用户管理员权限</h3> <p>要创建具有 sudo（管理员）权限的用户，运行以下命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>useradd <span class="nt">-d</span> <span class="s2">"/home/&lt;user_name&gt;"</span> <span class="nt">-m</span> <span class="nt">-s</span> <span class="s2">"/bin/bash"</span> <span class="nt">-G</span> <span class="nb">sudo</span> &lt;user_name&gt;
</code></pre></div></div> <p>其中：</p> <ul> <li><code class="language-plaintext highlighter-rouge">-G sudo</code>：将 <code class="language-plaintext highlighter-rouge">&lt;user_name&gt;</code> 添加到 <code class="language-plaintext highlighter-rouge">sudo</code> 用户组，使其具有管理员权限。</li> </ul> <h3 id="3-设置新用户的密码">3. 设置新用户的密码</h3> <p>新创建的用户默认没有密码。通过以下命令为 <code class="language-plaintext highlighter-rouge">&lt;user_name&gt;</code> 设置密码：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>passwd &lt;user_name&gt;
</code></pre></div></div> <p>运行此命令后，系统将提示输入两次密码。注意，出于安全考虑，在输入密码时不会有任何字符显示（不显示文本或提示符号）。只需输入密码并按 <code class="language-plaintext highlighter-rouge">Enter</code> 确认。</p> <p>通过以上步骤，可以成功创建一个新用户 <code class="language-plaintext highlighter-rouge">&lt;user_name&gt;</code>，该用户具备管理员权限，可以使用 <code class="language-plaintext highlighter-rouge">sudo</code> 执行命令。</p> <hr/> <h2 id="终端命令美化">终端命令美化</h2> <p>好看好用的终端提示符可以增加工作的愉悦感，这里使用<code class="language-plaintext highlighter-rouge">zsh</code>来美化终端，相关操作参考<a href="/blog/2022/Linux实用配置记录/">先前记录</a>。</p> <hr/> <h2 id="启用服务器的远程访问">启用服务器的远程访问</h2> <p>若要实现从非服务器物理位置远程访问 Ubuntu 服务器，可以通过安装并配置 SSH 服务来实现，并进行必要的防火墙配置。</p> <h3 id="1-安装和配置-ssh-服务">1. 安装和配置 SSH 服务</h3> <p>如果只需基本的 SSH 访问，安装<code class="language-plaintext highlighter-rouge">openssh-server</code>并开启 SSH 服务已足够。然而，在更高安全性需求的环境中，可以进一步优化 SSH 的配置文件<code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>openssh-server
</code></pre></div></div> <p>在完成安装后，检查 SSH 服务的状态以确认其正常运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status ssh
</code></pre></div></div> <ul> <li> <p><strong>配置建议</strong>：</p> <ul> <li> <p><strong>禁用 Root 用户直接登录</strong>（推荐）：避免直接以 root 身份登录服务器，增加安全性。在 <code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code> 中找到 <code class="language-plaintext highlighter-rouge">PermitRootLogin</code> 并将其设置为 <code class="language-plaintext highlighter-rouge">no</code>。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/ssh/sshd_config
</code></pre></div> </div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PermitRootLogin no
</code></pre></div> </div> </li> <li> <p><strong>限制允许访问的用户</strong>：可以通过 <code class="language-plaintext highlighter-rouge">AllowUsers</code> 配置项指定允许通过 SSH 登录的用户，进一步强化安全性。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AllowUsers &lt;user_name&gt;
</code></pre></div> </div> </li> <li> <p><strong>使用非默认端口</strong>（可选）：将 SSH 端口从默认的 22 改为其他端口，比如 2200。此方法可以减少扫描攻击的可能性，但需同时更新防火墙规则。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Port 2200
</code></pre></div> </div> </li> <li> <p><strong>启用自动断开空闲连接</strong>：为避免未使用的 SSH 会话长期占用资源，可在配置中添加以下行，以设置自动断开空闲连接。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ClientAliveInterval 300
ClientAliveCountMax 2
</code></pre></div> </div> </li> </ul> </li> </ul> <p>更改完成后，重启 SSH 服务以应用配置：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart ssh
</code></pre></div></div> <h3 id="2-配置-ufw-防火墙">2. 配置 UFW 防火墙</h3> <p>如启用了 UFW 防火墙，确保开启 SSH 端口，并根据是否更改了端口号进行相应设置。若使用默认的 22 端口，可以直接使用：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow ssh
</code></pre></div></div> <p>若更改了端口号，如设置为 2200，则需要如下命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow 2200/tcp
</code></pre></div></div> <ul> <li> <p><strong>配置建议：</strong></p> <ul> <li> <p>启用防火墙后，进行状态检查以确保规则正确应用：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw <span class="nb">enable
sudo </span>ufw status
</code></pre></div> </div> </li> </ul> </li> </ul> <h3 id="3-验证-ssh-连接">3. 验证 SSH 连接</h3> <p>在客户端系统（如 Windows）上测试与服务器的连接。Windows 下推荐使用 <a href="https://www.putty.org/">PuTTY</a> 或 <a href="https://aka.ms/terminal">Windows Terminal</a> 等支持 SSH 协议的终端工具，以确保连接的安全性和稳定性。</p> <p>要在 Windows 系统上测试与服务器的远程连接，可以使用 telnet 命令（注意：telnet 常用于测试连接，但生产环境中应使用更安全的 SSH 客户端）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>telnet &lt;remote_ip&gt; &lt;remote_port&gt;
</code></pre></div></div> <p>将 <remote_ip> 替换为服务器的 IP 地址，<remote_port> 替换为服务器监听的 SSH 端口（默认是 22）。</remote_port></remote_ip></p> <h3 id="4-修复-xauthority-文件权限问题">4. 修复 .Xauthority 文件权限问题</h3> <p><code class="language-plaintext highlighter-rouge">/home/&lt;user_name&gt;/.Xauthority</code> 文件权限错误可能是因为在非 root 权限下创建了该文件。除了修改用户目录的所有权外，确保相关 SSH 会话目录的权限也正确：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown</span> &lt;user_name&gt;:&lt;user_name&gt; <span class="nt">-R</span> /home/&lt;user_name&gt;
</code></pre></div></div> <p>若问题仍然存在，可以试试创建一个新的 <code class="language-plaintext highlighter-rouge">.Xauthority</code> 文件：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-u</span> &lt;user_name&gt; <span class="nb">touch</span> /home/&lt;user_name&gt;/.Xauthority
<span class="nb">sudo chown</span> &lt;user_name&gt;:&lt;user_name&gt; /home/&lt;user_name&gt;/.Xauthority
</code></pre></div></div> <h3 id="5-设置-fail2ban推荐">5. 设置 Fail2Ban（推荐）</h3> <p>为了进一步保护 SSH 服务免受暴力破解攻击，可以安装并配置 <code class="language-plaintext highlighter-rouge">fail2ban</code>。该工具会自动检测多次失败的登录尝试，并暂时禁用相应的 IP：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>fail2ban
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">fail2ban</code> 会自动启用 SSH 保护，也可以自定义 <code class="language-plaintext highlighter-rouge">/etc/fail2ban/jail.local</code> 文件以调整禁用时间、重试次数等参数：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[sshd]
enabled = true
port = 22
maxretry = 5
bantime = 600
</code></pre></div></div> <p>Fail2Ban 将自动识别多次失败的登录尝试并禁用相应 IP，从而进一步保障服务器安全。</p> <hr/> <h2 id="配置服务器与-github-的-ssh-连接">配置服务器与 GitHub 的 SSH 连接</h2> <p>以下是将 Ubuntu 服务器与 GitHub 配置为 SSH 连接的详细步骤，确保可以安全地克隆、推送和拉取 GitHub 上的仓库。</p> <h3 id="1-安装并验证-git">1. 安装并验证 Git</h3> <p>首先，安装 Git，并确认安装版本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>git
git <span class="nt">--version</span>
</code></pre></div></div> <h3 id="2-配置-git-用户信息">2. 配置 Git 用户信息</h3> <p>使用 GitHub 用户名和电子邮箱配置 Git。确保填写与 GitHub 账户一致的信息，以便在提交代码时正确记录作者身份：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name <span class="s2">"&lt;github_account_name&gt;"</span>
git config <span class="nt">--global</span> user.email <span class="s2">"&lt;github_account_email&gt;"</span>
</code></pre></div></div> <p>以上配置会添加到 <code class="language-plaintext highlighter-rouge">~/.gitconfig</code> 文件中，是全局设置，即应用于该用户下所有 Git 仓库。</p> <h3 id="3-生成-ssh-密钥对">3. 生成 SSH 密钥对</h3> <p>为了在服务器上与 GitHub 建立安全连接，需要生成 SSH 密钥对：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-C</span> <span class="s2">"&lt;github_account_email&gt;"</span> <span class="nt">-t</span> rsa
</code></pre></div></div> <ul> <li>说明： <ul> <li><code class="language-plaintext highlighter-rouge">-C "&lt;github_account_email&gt;"</code>：为密钥添加注释，一般是 GitHub 账户的邮箱地址。</li> <li><code class="language-plaintext highlighter-rouge">-t rsa</code>：指定密钥类型为 RSA（GitHub 支持的常用类型）。</li> </ul> </li> </ul> <p>运行命令后，按 <code class="language-plaintext highlighter-rouge">Enter</code> 三次（即保持默认文件名 <code class="language-plaintext highlighter-rouge">id_rsa</code> 和默认无密码的设置），密钥对会存储在 <code class="language-plaintext highlighter-rouge">~/.ssh</code> 目录中。</p> <h3 id="4-添加-ssh-公钥到-github">4. 添加 SSH 公钥到 GitHub</h3> <ol> <li> <p>使用以下命令打开生成的公钥文件，并复制其中的内容：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_rsa.pub
</code></pre></div> </div> <p>此命令会将公钥打印在终端上，可以选择性地使用文本编辑器打开并复制（例如使用 <code class="language-plaintext highlighter-rouge">vim ~/.ssh/id_rsa.pub</code>）。</p> </li> <li> <p>登录 GitHub 网站并导航到 <code class="language-plaintext highlighter-rouge">Settings</code> → <code class="language-plaintext highlighter-rouge">SSH and GPG keys</code> → <code class="language-plaintext highlighter-rouge">New SSH key</code>。</p> </li> <li> <p>将 <code class="language-plaintext highlighter-rouge">id_rsa.pub</code> 中的内容粘贴到 <code class="language-plaintext highlighter-rouge">New SSH key</code> 页面，并为此密钥设置一个描述性的名称（如 <code class="language-plaintext highlighter-rouge">Ubuntu Server Key</code>），然后保存。</p> </li> </ol> <h3 id="5-测试与-github-的-ssh-连接">5. 测试与 GitHub 的 SSH 连接</h3> <p>配置完成后，通过以下命令测试与 GitHub 的连接：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@github.com
</code></pre></div></div> <p>执行该命令时，GitHub 会返回一条信息确认连接成功，例如：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi &lt;github_account_name&gt;! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre></div></div> <p>此信息表明 SSH 连接已成功建立，可以在服务器上与 GitHub 进行代码的推送和拉取操作。</p> <h3 id="6-常见问题和解决方法">6. 常见问题和解决方法</h3> <ol> <li> <p><strong>SSH 密钥权限问题</strong>：确保 SSH 密钥对文件的权限正确，以防连接问题。检查和设置密钥的权限：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>600 ~/.ssh/id_rsa
<span class="nb">chmod </span>644 ~/.ssh/id_rsa.pub
</code></pre></div> </div> </li> <li> <p><strong>添加密钥到 SSH Agent</strong>（推荐）：若密钥在服务器启动后未自动加载，可以将其添加到 SSH Agent，以便每次重启后自动加载：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>ssh-agent <span class="nt">-s</span><span class="si">)</span><span class="s2">"</span>
ssh-add ~/.ssh/id_rsa
</code></pre></div> </div> </li> </ol> <hr/> <h2 id="python-环境配置与管理">Python 环境配置与管理</h2> <hr/> <h3 id="miniforge">Miniforge</h3> <p>在服务器上管理 Python Scientific 环境，我选择轻量、高效的 Miniforge 作为包管理工具，代替 Anaconda。Miniforge 默认配置 conda-forge 频道并集成了 Mamba，为包管理提供了更快的解决方案。下面是安装和配置 Miniforge 以及创建和删除环境的步骤。</p> <h4 id="1-安装-miniforge">1. 安装 Miniforge</h4> <p>首先，按照 <code class="language-plaintext highlighter-rouge">Miniforge</code> 的 <a href="https://github.com/conda-forge/miniforge">GitHub 项目页面</a> 中的安装说明进行下载和安装。以下是核心安装命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="s2">"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-</span><span class="si">$(</span><span class="nb">uname</span><span class="si">)</span><span class="s2">-</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="s2">.sh"</span>
bash Miniforge3-<span class="si">$(</span><span class="nb">uname</span><span class="si">)</span>-<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span>.sh
</code></pre></div></div> <ul> <li> <p>配置建议：</p> <ul> <li>建议将 Miniforge 安装在 <code class="language-plaintext highlighter-rouge">/usr/local/miniforge3</code>，这样可以让多个用户共享环境，但只有 root 用户可以进行修改。安装过程中，可以选择安装目录，系统会自动创建所需文件夹。</li> <li> <p>如果使用 ZSH，应确认 Miniforge 的路径被添加到<code class="language-plaintext highlighter-rouge">.zshrc</code>文件中。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$usr</span><span class="s2">/local/miniforge3/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div> </div> </li> <li>重新加载<code class="language-plaintext highlighter-rouge">.zshrc</code>配置：<code class="language-plaintext highlighter-rouge">source ~/.zshrc</code></li> </ul> </li> </ul> <h4 id="2-初始化-mamba-环境">2. 初始化 Mamba 环境</h4> <p>安装完成后，初始化 Mamba 以便在终端使用该命令。假设 Miniforge 安装在 <code class="language-plaintext highlighter-rouge">/usr/local/miniforge3</code>，执行以下命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/local/miniforge3/bin/mamba init
</code></pre></div></div> <p>此命令将初始化环境变量，需要重新启动终端以应用更改</p> <p>若使用 ZSH 无法，可以将<code class="language-plaintext highlighter-rouge">.bashrc</code>中的<code class="language-plaintext highlighter-rouge">mamba</code>配置复制到<code class="language-plaintext highlighter-rouge">.zshrc</code>，或者其他方式配置。</p> <h4 id="3-创建和管理环境">3. 创建和管理环境</h4> <p>在多用户服务器环境中，建议使用 root 权限（通过 <code class="language-plaintext highlighter-rouge">sudo su</code> 切换）创建和管理环境。这种方式可以避免普通用户意外或不受控地更改环境配置。</p> <h5 id="创建新环境">创建新环境</h5> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 以指定名称创建新环境</span>
mamba create <span class="nt">--name</span> &lt;new_env_name&gt; <span class="nv">python</span><span class="o">=</span>3.11 <span class="nt">--no-default-packages</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">--name &lt;new_env_name&gt;</code>：为新环境命名。</li> <li><code class="language-plaintext highlighter-rouge">python=3.11</code>：设置 Python 版本为 3.11。</li> <li><code class="language-plaintext highlighter-rouge">--no-default-packages</code>：仅安装 Python，不自动安装其他包。</li> <li>普通用户可以在其主目录中创建私有环境（例如 <code class="language-plaintext highlighter-rouge">/home/username/myenv</code>），执行如下命令：</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mamba create <span class="nt">--prefix</span> /home/username/myenv <span class="nv">python</span><span class="o">=</span>3.11 <span class="nt">--no-default-packages</span>
</code></pre></div></div> <h5 id="删除环境">删除环境</h5> <p>若要删除某个环境（包括所有关联的包），可以使用以下命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 通过环境名称删除</span>
mamba remove <span class="nt">--name</span> &lt;env_name&gt; <span class="nt">--all</span>
<span class="c"># 通过路径删除</span>
mamba remove <span class="nt">--prefix</span> /path/to/directory <span class="nt">--all</span>
</code></pre></div></div> <h4 id="4-安装常用包">4. 安装常用包</h4> <p>通常建议不直接修改 <code class="language-plaintext highlighter-rouge">base</code> 环境，而是根据实际需求创建专门环境。例如，可能需要安装 <code class="language-plaintext highlighter-rouge">JupyterHub</code>，它为多个用户提供 Jupyter notebook 服务。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建 Machine Learning 环境</span>
mamba create <span class="nt">--name</span> ml_env <span class="nv">python</span><span class="o">=</span>3.12 jupyterhub jupyterlab notebook notebook scipy numpy numpy
<span class="c"># 激活环境</span>
mamba activate ml_env
<span class="c"># 下载其他包</span>
mamba <span class="nb">install </span>jupyter-lsp-python jupyterlab-lsp jupyterlab-git jupyterlab_execute_time
</code></pre></div></div> <h4 id="5-防止未经授权的更新">5. 防止未经授权的更新</h4> <p>在多用户环境中，限制普通用户修改系统级环境有助于保持环境的稳定性。如果用户试图更新环境，将会遇到权限不足的错误。示例如下：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mamba update <span class="nt">--all</span>
</code></pre></div></div> <p>错误信息：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>EnvironmentNotWritableError: The current user does not have write permissions to the target environment.
  environment location: /usr/local/miniforge3
  uid: 1000
  gid: 1000
</code></pre></div></div> <p>这种设计可以确保环境的安全和一致性，避免因权限问题导致更新失败。</p> <p>如果需要临时给权限更新<code class="language-plaintext highlighter-rouge">base</code>环境，可以用<code class="language-plaintext highlighter-rouge">sudo</code>命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> /usr/local/miniforge3/bin/mamba update <span class="nt">--all</span>
</code></pre></div></div> <hr/> <h3 id="poetry">Poetry</h3> <p>Poetry 是一种高效、便捷的 Python 项目依赖管理工具，适用于快速创建和管理虚拟环境、安装依赖库以及发布 Python 包。</p> <h4 id="1-安装-poetry">1. 安装 Poetry</h4> <p>在安装 Poetry 前，应确保已安装 Python 3.7 以上版本。</p> <ol> <li> <p>使用官方安装脚本：</p> <p>Poetry 的安装脚本可以自动将 Poetry 安装在 <code class="language-plaintext highlighter-rouge">$HOME/.local/bin</code> 目录下。运行以下命令下载并执行安装脚本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-sSL</span> https://install.python-poetry.org | python3 -
</code></pre></div> </div> </li> <li> <p>将 Poetry 添加到 PATH：</p> <p>默认安装完成后，需要将 Poetry 添加到环境变量中。如果出现 <code class="language-plaintext highlighter-rouge">command not found</code> 错误，可以通过以下命令将其添加到当前会话的环境变量中：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.local/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div> </div> </li> <li> <p>验证安装：</p> <p>安装完成后，可以通过以下命令检查安装版本，确认安装是否成功：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry <span class="nt">--version</span>
</code></pre></div> </div> </li> </ol> <h4 id="2-创建新项目">2. 创建新项目</h4> <p>Poetry 提供了简化的命令来快速生成新项目的基本结构。</p> <ol> <li> <p>创建新项目：</p> <p>使用以下命令创建新项目目录（例如 <code class="language-plaintext highlighter-rouge">my_project</code>），并生成默认的 <code class="language-plaintext highlighter-rouge">pyproject.toml</code> 文件。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry new my_project
</code></pre></div> </div> <p>该命令将在项目目录中生成以下结构：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>my_project/
├── my_project/
│   └── __init__.py
├── pyproject.toml
└── tests/
    └── __init__.py
</code></pre></div> </div> </li> <li> <p>初始化现有项目（可选）：</p> <p>如果已存在项目并希望使用 Poetry 进行管理，可以通过 <code class="language-plaintext highlighter-rouge">poetry init</code> 初始化该项目。此命令将引导生成 <code class="language-plaintext highlighter-rouge">pyproject.toml</code> 文件，并配置初始依赖项：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>existing_project
poetry init
</code></pre></div> </div> </li> </ol> <h4 id="3-管理项目依赖">3. 管理项目依赖</h4> <p>Poetry 提供了便捷的依赖管理方式，区分了生产依赖和开发依赖。</p> <ol> <li> <p><strong>添加生产依赖</strong>：</p> <p>将依赖项添加到生产环境，例如 <code class="language-plaintext highlighter-rouge">requests</code> 库：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry add requests
</code></pre></div> </div> </li> <li> <p><strong>添加开发依赖</strong>：</p> <p>如果某些库仅用于开发和测试环境，可以使用 <code class="language-plaintext highlighter-rouge">--dev</code> 参数。此参数将依赖项添加到 <code class="language-plaintext highlighter-rouge">[tool.poetry.dev-dependencies]</code> 部分。例如，添加 <code class="language-plaintext highlighter-rouge">pytest</code> 作为开发依赖：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry add pytest <span class="nt">--dev</span>
</code></pre></div> </div> </li> <li> <p><strong>安装所有依赖</strong>：</p> <p>项目依赖项写入 <code class="language-plaintext highlighter-rouge">pyproject.toml</code> 文件后，可以使用以下命令安装所有依赖：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry <span class="nb">install</span>
</code></pre></div> </div> <p><code class="language-plaintext highlighter-rouge">poetry install</code> 会自动创建虚拟环境，并在虚拟环境中安装所需依赖。如果已存在 <code class="language-plaintext highlighter-rouge">poetry.lock</code> 文件，它将确保安装的依赖版本与锁定文件中的版本一致，以保证环境一致性。</p> </li> </ol> <hr/> <h4 id="4-管理虚拟环境">4. 管理虚拟环境</h4> <p>Poetry 在项目目录外创建虚拟环境，并自动激活和使用该虚拟环境。</p> <ol> <li> <p><strong>激活虚拟环境</strong>：</p> <p>可以通过以下命令激活 Poetry 创建的虚拟环境：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry shell
</code></pre></div> </div> </li> <li> <p><strong>退出虚拟环境</strong>：</p> <p>在虚拟环境中工作结束后，输入 <code class="language-plaintext highlighter-rouge">exit</code> 即可退出。</p> </li> <li> <p><strong>查看虚拟环境路径</strong>：</p> <p>若需查看虚拟环境的实际存储路径，可以使用：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry <span class="nb">env </span>info <span class="nt">--path</span>
</code></pre></div> </div> </li> <li> <p><strong>删除虚拟环境</strong>（可选）：</p> <p>如果需要重新创建虚拟环境或清理环境，可以删除虚拟环境：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry <span class="nb">env </span>remove python
</code></pre></div> </div> </li> </ol> <h4 id="5-管理依赖锁定文件">5. 管理依赖锁定文件</h4> <p>Poetry 使用 <code class="language-plaintext highlighter-rouge">poetry.lock</code> 文件锁定依赖的确切版本，以保证跨环境的一致性。</p> <ol> <li> <p><strong>更新依赖版本</strong>：</p> <p>当需要更新依赖版本时，可以使用以下命令重新解析依赖项并更新锁定文件：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry update
</code></pre></div> </div> </li> <li> <p><strong>安装指定的锁定版本</strong>：</p> <p>在协作项目中，团队成员可以基于 <code class="language-plaintext highlighter-rouge">poetry.lock</code> 文件安装项目的精确依赖项版本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry <span class="nb">install</span>
</code></pre></div> </div> </li> </ol> <h4 id="6-运行脚本和命令">6. 运行脚本和命令</h4> <p>Poetry 支持直接在虚拟环境中运行脚本或命令，简化了命令管理。</p> <ol> <li> <p><strong>运行项目脚本</strong>：</p> <p>使用 <code class="language-plaintext highlighter-rouge">poetry run</code> 在虚拟环境中执行命令。例如，执行 Python 脚本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry run python script.py
</code></pre></div> </div> </li> <li> <p><strong>直接运行单元测试</strong>：</p> <p>可以在虚拟环境中直接运行测试命令，如 <code class="language-plaintext highlighter-rouge">pytest</code>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry run pytest
</code></pre></div> </div> </li> </ol> <h4 id="7-发布-python-包">7. 发布 Python 包</h4> <p>Poetry 可以将项目发布到 <a href="https://pypi.org/">PyPI</a> 或其他自定义包仓库。</p> <ol> <li> <p><strong>构建项目</strong>：</p> <p>Poetry 提供了一键构建项目的功能，将项目打包为 <code class="language-plaintext highlighter-rouge">.whl</code> 和 <code class="language-plaintext highlighter-rouge">.tar.gz</code> 文件，准备发布：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry build
</code></pre></div> </div> </li> <li> <p><strong>发布到 PyPI</strong>：</p> <p>将包发布到 PyPI，需要在 <code class="language-plaintext highlighter-rouge">~/.pypirc</code> 文件中配置 PyPI 凭据，或使用 Poetry 的 <code class="language-plaintext highlighter-rouge">publish</code> 命令交互输入：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry publish <span class="nt">--build</span>
</code></pre></div> </div> <blockquote> <p><strong>注意</strong>：要在测试环境中验证发布过程，可以使用 <code class="language-plaintext highlighter-rouge">--repository</code> 参数发布到 PyPI 测试仓库。</p> </blockquote> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry publish <span class="nt">--repository</span> testpypi
</code></pre></div> </div> </li> </ol> <hr/> <p>以下是针对计量经济学领域使用 R 环境的配置指南，包括安装 R 和 RStudio、常用的 R 包配置等。</p> <hr/> <h2 id="在-ubuntu-上配置-r-环境用于计量经济学分析">在 Ubuntu 上配置 R 环境用于计量经济学分析</h2> <p>在计量经济学领域，R 适合处理经济数据、执行回归分析、时间序列分析等任务。</p> <h3 id="1-安装-r">1. 安装 R</h3> <p>Ubuntu 默认的软件仓库包含 R，但可能不是最新版本。为了获取最新的 R 版本，可以使用 CRAN 仓库。</p> <ol> <li> <p><strong>添加 CRAN 仓库</strong>：</p> <p>更新软件包列表并安装必要的依赖项：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>software-properties-common dirmngr <span class="nt">-y</span>
</code></pre></div> </div> </li> <li> <p><strong>添加 R 项目的 GPG 密钥</strong>：</p> <p>下载并添加 CRAN 的 GPG 公钥，以确保软件包的完整性：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-qO-</span> https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | <span class="nb">sudo tee</span> <span class="nt">-a</span> /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
</code></pre></div> </div> </li> <li> <p><strong>验证 GPG 密钥</strong>（可选）：</p> <p>验证密钥的指纹（<code class="language-plaintext highlighter-rouge">E298A3A825C0D65DFD57CBB651716619E084DAB9</code>）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--show-keys</span> /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
</code></pre></div> </div> </li> <li> <p><strong>添加 CRAN 仓库到源列表</strong>：</p> <p>将 CRAN 仓库添加到 apt 源列表中，以确保获取最新版本的 R：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>add-apt-repository <span class="s2">"deb https://cloud.r-project.org/bin/linux/ubuntu </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2">-cran40/"</span>
</code></pre></div> </div> </li> <li> <p><strong>安装 R 和开发包</strong>：</p> <p>安装最新版本的 R 和开发库：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>r-base r-base-dev <span class="nt">-y</span>
</code></pre></div> </div> </li> </ol> <h3 id="2-安装-rstudio">2. 安装 RStudio</h3> <p>RStudio 是一个功能强大的 IDE，适用于数据分析和可视化。RStudio 的安装过程简单，具体安装步骤可参考 <a href="https://posit.co/download/rstudio-server/">RStudio 官方安装指南</a>。</p> <p><strong>安装步骤</strong>：</p> <ol> <li>下载 RStudio Server 的最新版本。</li> <li> <p>使用 <code class="language-plaintext highlighter-rouge">dpkg</code> 命令进行安装：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dpkg <span class="nt">-i</span> rstudio-server-&lt;version&gt;.deb
</code></pre></div> </div> </li> <li> <p>检查安装状态：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status rstudio-server
</code></pre></div> </div> </li> </ol> <p>RStudio Server 安装成功后，可以通过 <code class="language-plaintext highlighter-rouge">http://&lt;your-server-ip&gt;:8787</code> 在浏览器中访问。</p> <h3 id="3-安装计量经济学相关的-r-包">3. 安装计量经济学相关的 R 包</h3> <p>计量经济学分析通常需要专门的数据处理、回归分析和时间序列分析包。</p> <ol> <li> <p><strong>安装系统依赖</strong>：</p> <p>安装系统级的开发包，以确保 R 包安装顺利（特别是对一些需要编译的包，如 <code class="language-plaintext highlighter-rouge">tidyverse</code> 和 <code class="language-plaintext highlighter-rouge">data.table</code>）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>build-essential libssl-dev libcurl4-openssl-dev libxml2-dev
</code></pre></div> </div> </li> <li> <p><strong>安装计量经济学和数据处理包</strong>：</p> <p>启动 R 控制台并安装常用的计量经济学包：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>R
</code></pre></div> </div> <p>在 R 控制台中执行以下命令：</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">chooseCRANmirror</span><span class="p">(</span><span class="n">graphics</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="n">install.packages</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"tidyverse"</span><span class="p">,</span><span class="w"> </span><span class="s2">"data.table"</span><span class="p">,</span><span class="w"> </span><span class="s2">"broom"</span><span class="p">,</span><span class="w"> </span><span class="s2">"plm"</span><span class="p">,</span><span class="w"> </span><span class="s2">"forecast"</span><span class="p">,</span><span class="w"> </span><span class="s2">"lmtest"</span><span class="p">,</span><span class="w"> </span><span class="s2">"sandwich"</span><span class="p">,</span><span class="w"> </span><span class="s2">"stargazer"</span><span class="p">))</span><span class="w">
</span></code></pre></div> </div> <ul> <li><code class="language-plaintext highlighter-rouge">tidyverse</code>：包含 <code class="language-plaintext highlighter-rouge">dplyr</code>、<code class="language-plaintext highlighter-rouge">ggplot2</code>、<code class="language-plaintext highlighter-rouge">tidyr</code> 等数据处理和可视化包。</li> <li><code class="language-plaintext highlighter-rouge">data.table</code>：用于快速数据处理。</li> <li><code class="language-plaintext highlighter-rouge">broom</code>：将回归分析结果整理成易于分析的表格。</li> <li><code class="language-plaintext highlighter-rouge">plm</code>：用于面板数据回归分析。</li> <li><code class="language-plaintext highlighter-rouge">forecast</code>：用于时间序列预测和分析。</li> <li><code class="language-plaintext highlighter-rouge">lmtest</code> 和 <code class="language-plaintext highlighter-rouge">sandwich</code>：提供计量经济学的测试工具和稳健标准误差。</li> <li><code class="language-plaintext highlighter-rouge">stargazer</code>：用于将回归结果输出为易于理解的表格，适合论文或报告。</li> </ul> </li> <li> <p><strong>安装高级计量经济学工具</strong>：</p> <ul> <li><code class="language-plaintext highlighter-rouge">AER</code>（Applied Econometrics with R）：包含用于经济学研究的常用函数和数据集。</li> <li><code class="language-plaintext highlighter-rouge">urca</code>：提供单根和协整检验。</li> <li><code class="language-plaintext highlighter-rouge">vars</code>：用于向量自回归（VAR）分析。</li> </ul> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">install.packages</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"AER"</span><span class="p">,</span><span class="w"> </span><span class="s2">"urca"</span><span class="p">,</span><span class="w"> </span><span class="s2">"vars"</span><span class="p">))</span><span class="w">
</span></code></pre></div> </div> </li> <li> <p><strong>安装金融时间序列分析包</strong>（可选）：</p> <ul> <li><code class="language-plaintext highlighter-rouge">quantmod</code> 和 <code class="language-plaintext highlighter-rouge">TTR</code>：用于金融市场数据分析和技术指标计算。</li> <li><code class="language-plaintext highlighter-rouge">zoo</code> 和 <code class="language-plaintext highlighter-rouge">xts</code>：处理不规则时间序列数据。</li> </ul> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">install.packages</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"quantmod"</span><span class="p">,</span><span class="w"> </span><span class="s2">"TTR"</span><span class="p">,</span><span class="w"> </span><span class="s2">"zoo"</span><span class="p">,</span><span class="w"> </span><span class="s2">"xts"</span><span class="p">))</span><span class="w">
</span></code></pre></div> </div> </li> </ol> <h3 id="4-使用-github-令牌安装私有包">4. 使用 GitHub 令牌安装私有包</h3> <p>如果需要从 GitHub 安装某些实验性或定制的包，建议使用 GitHub 令牌，以免受到 API 速率限制。</p> <p><strong>生成 GitHub 令牌</strong>：</p> <ol> <li> <p>在 R 控制台中生成令牌：</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">usethis</span><span class="o">::</span><span class="n">create_github_token</span><span class="p">()</span><span class="w">
</span></code></pre></div> </div> </li> <li> <p>在 GitHub 网站上生成一个新的 Personal Access Token（路径：<code class="language-plaintext highlighter-rouge">Settings</code> → <code class="language-plaintext highlighter-rouge">Developer settings</code> → <code class="language-plaintext highlighter-rouge">Personal access token</code> → <code class="language-plaintext highlighter-rouge">Tokens (classic)</code>）。</p> </li> <li> <p><strong>配置 GitHub 令牌</strong>：</p> <p>将生成的令牌添加到 R 环境中：</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gitcreds</span><span class="o">::</span><span class="n">gitcreds_set</span><span class="p">()</span><span class="w">
</span></code></pre></div> </div> </li> </ol> <p>在此设置下，可以安全地从 GitHub 安装私有包，避免 API 限制。</p> <h3 id="5-示例安装和使用-plm-包进行面板数据回归">5. 示例：安装和使用 <code class="language-plaintext highlighter-rouge">plm</code> 包进行面板数据回归</h3> <p>假设要使用面板数据进行回归分析，下面是如何安装 <code class="language-plaintext highlighter-rouge">plm</code> 并执行固定效应模型的示例：</p> <ol> <li> <p><strong>安装 <code class="language-plaintext highlighter-rouge">plm</code></strong>（如果未安装）：</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">install.packages</span><span class="p">(</span><span class="s2">"plm"</span><span class="p">)</span><span class="w">
</span></code></pre></div> </div> </li> <li> <p><strong>加载并使用 <code class="language-plaintext highlighter-rouge">plm</code></strong>：</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">plm</span><span class="p">)</span><span class="w">

</span><span class="c1"># 创建示例面板数据集</span><span class="w">
</span><span class="n">data</span><span class="p">(</span><span class="s2">"Produc"</span><span class="p">,</span><span class="w"> </span><span class="n">package</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"plm"</span><span class="p">)</span><span class="w">
</span><span class="n">pdata</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pdata.frame</span><span class="p">(</span><span class="n">Produc</span><span class="p">,</span><span class="w"> </span><span class="n">index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"state"</span><span class="p">,</span><span class="w"> </span><span class="s2">"year"</span><span class="p">))</span><span class="w">

</span><span class="c1"># 固定效应模型回归</span><span class="w">
</span><span class="n">fe_model</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">plm</span><span class="p">(</span><span class="nf">log</span><span class="p">(</span><span class="n">gsp</span><span class="p">)</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">pcap</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">hwy</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">water</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">util</span><span class="p">),</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pdata</span><span class="p">,</span><span class="w"> </span><span class="n">model</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"within"</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">fe_model</span><span class="p">)</span><span class="w">
</span></code></pre></div> </div> <p>以下是整理优化后的指南，以帮助更有效地同步数据、安装字体、并处理 Nvidia 驱动程序和库的相关问题。</p> </li> </ol> <hr/> <h2 id="其他问题">其他问题</h2> <hr/> <h3 id="1-同步数据">1. 同步数据</h3> <p>要将本地数据同步到远程服务器，建议使用 <code class="language-plaintext highlighter-rouge">rsync</code>，这是一种高效且可靠的同步方法。更多细节应参考<a href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories">此教程</a>。</p> <ul> <li> <p><strong>同步命令</strong>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync <span class="nt">-r</span> /path/to/sync/ &lt;username&gt;@&lt;remote_host&gt;:&lt;destination_directory&gt;
</code></pre></div> </div> <p>上述命令会将本地目录 <code class="language-plaintext highlighter-rouge">/path/to/sync/</code> 的所有内容「推送」到远程服务器的 <code class="language-plaintext highlighter-rouge">&lt;destination_directory&gt;</code>。</p> </li> <li> <p><strong>监控大文件的传输进度</strong>：</p> <p>如果同步的是较大文件，可以用 <code class="language-plaintext highlighter-rouge">watch</code> 命令来监控同步进度：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>watch <span class="nt">-n</span> &lt;time_interval&gt; <span class="nb">du</span> <span class="nt">-sh</span> /path/to/large/file
</code></pre></div> </div> <p>该命令会每隔 <code class="language-plaintext highlighter-rouge">&lt;time_interval&gt;</code> 秒刷新一次文件的大小变化。</p> </li> </ul> <hr/> <h3 id="2-安装常用字体">2. 安装常用字体</h3> <p>Linux 系统默认不带有一些 Windows 中的常用字体（例如 <code class="language-plaintext highlighter-rouge">Arial</code> 和 <code class="language-plaintext highlighter-rouge">Times New Roman</code>）。安装这些字体可以改善文档和网站的显示效果，特别是那些依赖这些字体的图形输出。安装 Microsoft TrueType 核心字体包并刷新缓存：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>msttcorefonts
<span class="nb">rm</span> <span class="nt">-rf</span> ~/.cache/matplotlib
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">msttcorefonts</code> 包括多种 Microsoft 字体，如 Arial 和 Times New Roman。</li> <li>第二个命令删除了 <code class="language-plaintext highlighter-rouge">matplotlib</code> 缓存目录，以确保更新后的字体正确加载。</li> </ul> <hr/> <h3 id="3-驱动程序库版本不匹配">3. 驱动程序/库版本不匹配</h3> <p>在运行 <code class="language-plaintext highlighter-rouge">nvidia-smi</code> 时，如果出现以下错误：</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failed to initialize NVML: Driver/library version mismatch
</code></pre></div></div> <p>可以参考 <a href="https://stackoverflow.com/questions/43022843/nvidia-nvml-driver-library-version-mismatch/45319156#45319156">Stack Overflow 上的解决方案</a>。简要的步骤如下：</p> <ol> <li> <p><strong>重启服务器</strong>：<br/> 某些情况下，重启服务器即可解决问题：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>reboot
</code></pre></div> </div> </li> <li> <p><strong>卸载并重新安装 Nvidia 驱动程序</strong>：</p> <p>如果重启无效，尝试以下命令清除现有的 Nvidia 驱动程序并重新安装：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt purge nvidia<span class="k">*</span> libnvidia<span class="k">*</span>
<span class="nb">sudo </span>ubuntu-drivers <span class="nb">install
sudo </span>reboot
</code></pre></div> </div> </li> </ol> <hr/> <h3 id="4升级-nvidia-驱动程序">4.升级 Nvidia 驱动程序</h3> <p>要升级 Nvidia 驱动程序，可以按照以下步骤进行：</p> <ol> <li> <p><strong>卸载旧驱动程序</strong>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt purge <span class="k">*</span>nvidia<span class="k">*</span> <span class="nt">-y</span>
<span class="nb">sudo </span>apt remove <span class="k">*</span>nvidia<span class="k">*</span> <span class="nt">-y</span>
<span class="nb">sudo rm</span> /etc/apt/sources.list.d/cuda<span class="k">*</span>
<span class="nb">sudo </span>apt autoremove <span class="nt">-y</span> <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt autoclean <span class="nt">-y</span>
<span class="nb">sudo rm</span> <span class="nt">-rf</span> /usr/local/cuda<span class="k">*</span>
</code></pre></div> </div> </li> <li> <p><strong>查找并安装推荐的驱动程序</strong>：</p> <p>运行以下命令来查找推荐的 Nvidia 驱动程序版本：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu-drivers devices
</code></pre></div> </div> <p>或者通过以下命令安装指定版本（例如 <code class="language-plaintext highlighter-rouge">550</code>，根据系统需求调整版本号）：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>libnvidia-common-550-server libnvidia-gl-550-server nvidia-driver-550-server <span class="nt">-y</span>
</code></pre></div> </div> </li> <li> <p><strong>重启并检查</strong>：</p> <p>重启服务器并使用 <code class="language-plaintext highlighter-rouge">nvidia-smi</code> 检查新驱动是否正常运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>reboot now
</code></pre></div> </div> <p>如果 <code class="language-plaintext highlighter-rouge">nvidia-smi</code> 返回以下错误：</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NVIDIA-SMI has failed because it couldn't communicate with the NVIDIA driver.
</code></pre></div> </div> <p>尝试重新安装内核头文件并重启。</p> </li> </ol> <hr/> <h3 id="5内核头文件安装和-gcc-配置">5.内核头文件安装和 GCC 配置</h3> <p>如遇到内核头文件或 GCC 版本问题，按以下步骤操作：</p> <ol> <li> <p><strong>重新安装内核头文件</strong>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">--reinstall</span> linux-headers-<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>
<span class="nb">sudo </span>reboot
</code></pre></div> </div> </li> <li> <p><strong>更新 GCC 版本</strong>：</p> <p>如果内核头文件安装过程中遇到 GCC 错误，可以升级到 <code class="language-plaintext highlighter-rouge">gcc-12</code>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>gcc-12
<span class="nb">sudo </span>update-alternatives <span class="nt">--install</span> /usr/bin/gcc gcc /usr/bin/gcc-12 12
</code></pre></div> </div> <p>重新安装内核头文件并重启服务器后，<code class="language-plaintext highlighter-rouge">nvidia-smi</code> 应该能够正常工作。</p> </li> </ol>]]></content><author><name></name></author><category term="Productivity"/><category term="Ubuntu"/><category term="Productivity"/><category term="Deployment"/><category term="Server"/><summary type="html"><![CDATA[如何部署一个 Linux 服务器]]></summary></entry><entry><title type="html">Conda-Pyenv-Poetry 多轨管理 Python 环境</title><link href="https://waynexucn.github.io//blog/2024/%E5%A4%9A%E8%BD%A8%E7%AE%A1%E7%90%86Python%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/" rel="alternate" type="text/html" title="Conda-Pyenv-Poetry 多轨管理 Python 环境"/><published>2024-02-09T13:08:36+00:00</published><updated>2024-02-09T13:08:36+00:00</updated><id>https://waynexucn.github.io//blog/2024/%E5%A4%9A%E8%BD%A8%E7%AE%A1%E7%90%86Python%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86</id><content type="html" xml:base="https://waynexucn.github.io//blog/2024/%E5%A4%9A%E8%BD%A8%E7%AE%A1%E7%90%86Python%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/"><![CDATA[<h2 id="背景">背景</h2> <p>Python 项目类型很多：从简单的数据分析、深度学习到 Web 开发和应用构建，每种类型对版本、环境和依赖的要求各不相同。</p> <p>对于简单的项目，pip 就可以满足需求。但随着数据科学项目或应用构建项目的扩大，各项目的 Python 版本和环境间的差异越来越大，conda 虽然可以实现很好的环境管理，但它太「重」了，过于臃肿。无论是 Anaconda 还是 miniconda 都存在安装依赖库过于激进的问题，使得项目环境占用空间动辄 5-6G，出现不必要膨胀。</p> <p>因此，我将我的需求分为两类。一类是用 Python 写一些数据科学相关的项目，可以使用 conda 让多个类似的项目共用一个虚拟环境，这对动辄几个 G 的机器学习依赖的管理，非常重要。另一类，是用 Python 写一些小项目，可能是 Web、爬虫，也可能是纯 Python 实现，这个时候我仅仅需要安装我需要的依赖，同时不同项目可能对 Python 的版本有要求。这时候再用 conda 就很不明智了。</p> <p>为了满足以上需求，经过一系列调研，最终确定了三个工具共同来管理我的 Python 环境：<code class="language-plaintext highlighter-rouge">Conda</code>、<code class="language-plaintext highlighter-rouge">Pyenv</code>、<code class="language-plaintext highlighter-rouge">Poetry</code>。</p> <p>最终的目标为：</p> <ul> <li><code class="language-plaintext highlighter-rouge">Pyenv</code>管理系统全局的 Python 版本，新 shell-session 的 Python 由<code class="language-plaintext highlighter-rouge">Pyenv</code>接管。</li> <li><code class="language-plaintext highlighter-rouge">Conda</code>负责建立可以让多个类似项目公用的虚拟环境，新 shell-session 不再默认激活 base 或者其他 Conda 环境。</li> <li><code class="language-plaintext highlighter-rouge">Poetry</code>为不同项目建立轻便独立的虚拟环境，其 Python 版本依赖 Pyenv。</li> </ul> <blockquote> <p>2024.11.08 更新：使用<code class="language-plaintext highlighter-rouge">Rust</code>编写的 Python 包管理器 <code class="language-plaintext highlighter-rouge">uv</code> 替代了<code class="language-plaintext highlighter-rouge">Pyenv</code>和<code class="language-plaintext highlighter-rouge">Poetry</code>的所有功能，更加快捷。</p> <p>2024.12.05 更新：<code class="language-plaintext highlighter-rouge">uv</code> 有点难用，还是用回<code class="language-plaintext highlighter-rouge">Pyenv</code>和<code class="language-plaintext highlighter-rouge">Poetry</code>。</p> </blockquote> <h2 id="组合优势">组合优势</h2> <h3 id="pyenv灵活切换-python-版本">Pyenv：灵活切换 Python 版本</h3> <ul> <li><strong>安装多个 Python 版本</strong>：不管是 Python 2 还是 Python 3，不同版本的 Python 在项目中的需求各不相同。通过 Pyenv，可以安装多个版本，选择一个作为全局版本，并在不同项目间快速切换。</li> <li><strong>项目独立版本控制</strong>：在每个项目的根目录下创建 <code class="language-plaintext highlighter-rouge">.python-version</code> 文件，设置每个项目专属的 Python 版本。这样，即使在不同项目间切换，也可以保证每个项目使用对应的 Python 版本。</li> </ul> <h4 id="安装与配置">安装与配置</h4> <ul> <li> <p><strong>PowerShell</strong> - easiest way （for windows）</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-WebRequest</span><span class="w"> </span><span class="nt">-UseBasicParsing</span><span class="w"> </span><span class="nt">-Uri</span><span class="w"> </span><span class="s2">"https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1"</span><span class="w"> </span><span class="nt">-OutFile</span><span class="w"> </span><span class="s2">"./install-pyenv-win.ps1"</span><span class="p">;</span><span class="w"> </span><span class="o">&amp;</span><span class="s2">"./install-pyenv-win.ps1"</span><span class="w">
</span></code></pre></div> </div> </li> <li>运行<code class="language-plaintext highlighter-rouge">pyenv --version</code>检查安装是否成功。</li> <li>运行<code class="language-plaintext highlighter-rouge">pyenv install --list</code>检查 pyenv-win 支持的 Python 版本列表。</li> <li>运行<code class="language-plaintext highlighter-rouge">pyenv install &lt;version&gt;</code>以安装支持的版本。</li> <li>运行<code class="language-plaintext highlighter-rouge">pyenv global &lt;version&gt;</code>以设置全局 Python 版本。</li> <li>在当前路径下运行<code class="language-plaintext highlighter-rouge">pyenv local &lt;version&gt;</code>以设置 Python 本地版本，将版本号写入当前目录下的<code class="language-plaintext highlighter-rouge">.python-version</code>文件的方式（优先级高于<code class="language-plaintext highlighter-rouge">global</code>）。</li> <li> <p>检查正在使用的 Python 版本及其路径。</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;</span><span class="w"> </span><span class="n">pyenv</span><span class="w"> </span><span class="nx">version</span><span class="w">
</span><span class="err">&lt;</span><span class="n">version</span><span class="err">&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">set</span><span class="w"> </span><span class="nx">by</span><span class="w"> </span><span class="nx">\path\to\.pyenv\pyenv-win\.python-version</span><span class="p">)</span><span class="w">
</span></code></pre></div> </div> </li> <li> <p>检查 Python 是否允许正常。</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;</span><span class="w"> </span><span class="n">python</span><span class="w"> </span><span class="nt">-c</span><span class="w"> </span><span class="s2">"import sys; print(sys.executable)"</span><span class="w">
</span><span class="n">\path\to\.pyenv\pyenv-win\versions\</span><span class="err">&lt;</span><span class="nx">version</span><span class="err">&gt;</span><span class="nx">\python.exe</span><span class="w">
</span></code></pre></div> </div> </li> </ul> <h3 id="conda适合数据科学和深度学习的环境管理工具">Conda：适合数据科学和深度学习的环境管理工具</h3> <ul> <li><strong>环境隔离</strong>：Conda 可以创建完全隔离的环境，每个环境中的依赖互不影响，避免了包版本冲突的问题。</li> <li><strong>科学计算和深度学习</strong>：Conda 在这些领域有专门优化的库版本，比如 GPU 支持的 TensorFlow 和 PyTorch。</li> <li><strong>多语言支持</strong>：不仅可以管理 Python 包，也支持 R、Ruby 等语言的包。</li> </ul> <h4 id="安装与配置-1">安装与配置</h4> <p>这里使用的是针对 conda-forge 的 Conda 和 Mamba 的最小安装程序 Miniforge，预配置了以下功能：</p> <ul> <li>基础环境中的包来自 conda-forge 频道。</li> <li>conda-forge 频道被设置为默认（也是唯一）的频道。</li> </ul> <p>Miniforge 安装程序在此处可用：<a href="https://github.com/conda-forge/miniforge/releases">https://github.com/conda-forge/miniforge/releases</a></p> <p>在 Windows 上，Miniforge 默认不会添加到系统路径中。</p> <ul> <li>在这种情况下，从普通命令提示符中无法使用 conda / mamba，除非提供可执行文件的完整路径，例如<code class="language-plaintext highlighter-rouge">C:\Users\myusername\miniforge3\condabin\conda</code>。相反，建议使用从开始菜单可用的 Miniforge Prompt。</li> <li>如果需要，在安装后可以手动将<code class="language-plaintext highlighter-rouge">C:\Users\myusername\miniforge3\condabin</code>文件夹添加到路径环境变量中，以便更方便地从任何命令提示符中使用该软件，并尽可能减少软件冲突的机会。</li> </ul> <blockquote> <p><strong>注意一</strong>：</p> <p>环境配置还需要关闭自动激活 base 环境 <code class="language-plaintext highlighter-rouge">conda config --set auto_activate_base false</code>。 这样每次打开终端默认的都是 pyenv 提供的 Python，而非 conda 的 base 环境了。</p> </blockquote> <blockquote> <p><strong>注意二</strong>：</p> <p>默认情况下，Windows PowerShell 在启动时会加载 conda 的路径。因此，我们需要确保 pyenv 的 Python 在 PATH 中优先于 conda。 即将 pyenv 的路径移动到 Path 的最前面，确保它优先于 conda 的路径。</p> </blockquote> <h3 id="poetry依赖管理和项目打包的理想工具">Poetry：依赖管理和项目打包的理想工具</h3> <p>Poetry 轻便且强大，使用 pyproject.toml 和 poetry.lock 文件来管理依赖，类似于 JavaScript/Node.js 的 Npm 和 Rust 的 Cargo，这俩都是非常成熟好用的依赖管理方案。 因其本身并不具有管理 Python 解释器的功能，因此推荐和 pyenv/pyenv-win 一起使用，可以轻松下载和设置不同版本的 Python 解释器。</p> <ul> <li><strong>依赖解析和锁定</strong>：Poetry 会自动解析和锁定依赖，避免不同版本之间的兼容性问题。</li> <li><strong>项目打包和发布</strong>：可以直接把项目打包并发布到 PyPI，适合需要发布的小型工具或 Web 应用。</li> <li><strong>自动创建虚拟环境</strong>：Poetry 可以在项目目录中自动创建虚拟环境，简化了环境配置过程。</li> </ul> <h4 id="安装与配置-2">安装与配置</h4> <p><a href="https://github.com/pypa/pipx">pipx</a> 用于全局安装 Python CLI 应用程序，同时仍将它们隔离在虚拟环境中。pipx 当用于安装 Poetry 时将管理升级和卸载。</p> <ul> <li>如果 pipx 还未安装，您可以按照官方 pipx 安装说明中的任何一种选项进行操作。任何非古老版本的 pipx 都可以。</li> <li> <p>使用 pipx 安装 Portry</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pipx</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">poetry</span><span class="w">
</span></code></pre></div> </div> </li> </ul> <h2 id="总结">总结</h2> <ul> <li><strong>Pyenv</strong>：负责 Python 版本管理，解决不同项目对 Python 版本的需求。</li> <li><strong>Conda</strong>：适合数据科学、深度学习等依赖复杂的项目，确保环境隔离和依赖兼容。</li> <li><strong>Poetry</strong>：用于依赖管理和打包，适合 Web 开发和小型应用项目，支持依赖锁定和发布。</li> </ul>]]></content><author><name></name></author><category term="Productivity"/><category term="Python"/><category term="Ubuntu"/><category term="Windows"/><summary type="html"><![CDATA[不同需求下的 Python 环境管理方法]]></summary></entry></feed>