<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://waynexucn.github.io//feed/by_tag/Python.xml" rel="self" type="application/atom+xml"/><link href="https://waynexucn.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-05T07:44:16+00:00</updated><id>https://waynexucn.github.io//feed/by_tag/Python.xml</id><title type="html">Wenjie Xu</title><subtitle>Wenjie Xu&apos;s home page. feedId:113833929030099968+userId:72841831310508032 </subtitle><entry><title type="html">Python 项目中高效管理路径的范式</title><link href="https://waynexucn.github.io//blog/2024/Python%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E8%B7%AF%E5%BE%84%E7%9A%84%E8%8C%83%E5%BC%8F/" rel="alternate" type="text/html" title="Python 项目中高效管理路径的范式"/><published>2024-07-15T22:18:35+00:00</published><updated>2024-07-15T22:18:35+00:00</updated><id>https://waynexucn.github.io//blog/2024/Python%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E8%B7%AF%E5%BE%84%E7%9A%84%E8%8C%83%E5%BC%8F</id><content type="html" xml:base="https://waynexucn.github.io//blog/2024/Python%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E8%B7%AF%E5%BE%84%E7%9A%84%E8%8C%83%E5%BC%8F/"><![CDATA[<h1 id="python-项目中高效管理路径的范式">Python 项目中高效管理路径的范式</h1> <p>在 Python 项目中，代码需要频繁读取数据文件、配置文件或输出日志文件。如果直接使用硬编码路径或者频繁拼接相对路径，不仅代码冗长，还容易因路径错误而导致程序崩溃。为了解决这些问题，记录一套规范的路径管理方法，可以提升代码的可读性、维护性和跨平台兼容性。</p> <h2 id="路径管理的四种方法">路径管理的四种方法</h2> <h3 id="1-设置项目的根目录">1. 设置项目的根目录</h3> <p>将项目的根目录（Project Root）作为路径管理的基准，所有其他路径都从这个基准出发，而不是依赖每个文件的相对路径。通过动态计算项目根目录的位置，例如：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="c1"># 通过当前文件（如 paths.py）定位到项目根目录，叠加多个 parent
</span><span class="n">PROJECT_ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">__file__</span><span class="p">).</span><span class="nf">resolve</span><span class="p">().</span><span class="n">parent</span><span class="p">.</span><span class="n">parent</span>
<span class="c1"># PROJECT_ROOT = Path.cwd().resolve().parent.parent
</span></code></pre></div></div> <h4 id="优点">优点</h4> <ul> <li>不依赖环境变量，适应不同开发环境。</li> <li>路径管理从统一基准出发，逻辑清晰。</li> </ul> <hr/> <h3 id="2-使用环境变量配置项目根目录">2. 使用环境变量配置项目根目录</h3> <p>通过环境变量（如 <code class="language-plaintext highlighter-rouge">PYTHONPATH</code>​）配置项目根目录，所有路径的计算基于该环境变量。</p> <ol> <li> <p>在环境变量中添加项目根目录路径。</p> <ul> <li> <p><strong>Linux/MacOS</strong>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span>/path/to/your/project
</code></pre></div> </div> </li> <li> <p><strong>Windows</strong>：</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">set</span><span class="w"> </span><span class="nx">PYTHONPATH</span><span class="o">=</span><span class="n">C:\path\to\your\project</span><span class="w">
</span></code></pre></div> </div> </li> </ul> </li> <li> <p>在代码中使用 <code class="language-plaintext highlighter-rouge">os.environ</code>​ 读取环境变量：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">osfrom</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span><span class="c1"># 从环境变量中获取项目根目录 PROJECT_ROOT = Path(os.environ["PYTHONPATH"])
</span></code></pre></div> </div> </li> </ol> <h4 id="优点-1">优点</h4> <ul> <li>解耦代码与文件系统结构，路径管理更加灵活。</li> <li>特别适合跨环境（开发/生产）的部署场景。</li> </ul> <hr/> <h3 id="3-集中管理路径常用">3. 集中管理路径（常用）</h3> <p>创建一个专门的路径管理模块，将项目中所有重要的路径集中定义。在 <code class="language-plaintext highlighter-rouge">config/paths.py</code>​ 中定义常用路径：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="c1"># 项目根目录
</span><span class="n">PROJECT_ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">__file__</span><span class="p">).</span><span class="nf">resolve</span><span class="p">().</span><span class="n">parent</span><span class="p">.</span><span class="n">parent</span>

<span class="c1"># 数据文件夹
</span><span class="n">DATA_RAW</span> <span class="o">=</span> <span class="n">PROJECT_ROOT</span> <span class="o">/</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span> <span class="o">/</span> <span class="sh">"</span><span class="s">raw</span><span class="sh">"</span>
<span class="n">DATA_PROCESSED</span> <span class="o">=</span> <span class="n">PROJECT_ROOT</span> <span class="o">/</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span> <span class="o">/</span> <span class="sh">"</span><span class="s">processed</span><span class="sh">"</span>

<span class="c1"># 日志文件夹
</span><span class="n">LOGS</span> <span class="o">=</span> <span class="n">PROJECT_ROOT</span> <span class="o">/</span> <span class="sh">"</span><span class="s">logs</span><span class="sh">"</span>

<span class="c1"># 结果文件夹
</span><span class="n">RESULTS</span> <span class="o">=</span> <span class="n">PROJECT_ROOT</span> <span class="o">/</span> <span class="sh">"</span><span class="s">results</span><span class="sh">"</span>
</code></pre></div></div> <p>在其他模块中引用：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">config.paths</span> <span class="kn">import</span> <span class="n">DATA_RAW</span>

<span class="n">file_path</span> <span class="o">=</span> <span class="n">DATA_RAW</span> <span class="o">/</span> <span class="sh">"</span><span class="s">data.txt</span><span class="sh">"</span>
<span class="k">with</span> <span class="n">file_path</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
</code></pre></div></div> <h4 id="优点-2">优点</h4> <ul> <li>路径定义集中管理，修改目录结构时无需逐个调整代码。</li> <li>增强代码的可读性和模块化程度。</li> </ul> <hr/> <h3 id="4-使用动态路径管理工具">4. 使用动态路径管理工具</h3> <p>利用 Python 标准库或第三方工具（如 <code class="language-plaintext highlighter-rouge">importlib.resources</code>​）来动态管理项目内的文件路径，尤其适合读取静态资源文件。</p> <ul> <li> <p><strong>​<code class="language-plaintext highlighter-rouge">importlib.resources</code>​</strong>​（适用于 Python 3.9+）：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">importlib.resources</span> <span class="kn">import</span> <span class="n">files</span>

<span class="c1"># 获取文件路径
</span><span class="n">file_path</span> <span class="o">=</span> <span class="nf">files</span><span class="p">(</span><span class="sh">"</span><span class="s">data.raw</span><span class="sh">"</span><span class="p">)</span> <span class="o">/</span> <span class="sh">"</span><span class="s">data.txt</span><span class="sh">"</span>

<span class="c1"># 读取文件
</span><span class="k">with</span> <span class="n">file_path</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
</code></pre></div> </div> </li> <li> <p><strong>​<code class="language-plaintext highlighter-rouge">pkg_resources</code>​</strong>​（传统方法）：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pkg_resources</span> <span class="kn">import</span> <span class="n">resource_filename</span>

<span class="c1"># 获取文件路径
</span><span class="n">file_path</span> <span class="o">=</span> <span class="nf">resource_filename</span><span class="p">(</span><span class="sh">"</span><span class="s">data.raw</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">data.txt</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 读取文件
</span><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
</code></pre></div> </div> </li> </ul> <h4 id="优点-3">优点</h4> <ul> <li>文件路径动态计算，支持打包和分发。</li> <li>避免直接硬编码路径，增强代码的通用性。</li> </ul> <hr/> <h2 id="路径管理的高级实践使用env文件管理环境变量">路径管理的高级实践：使用<code class="language-plaintext highlighter-rouge">.env</code>文件管理环境变量</h2> <p>通过 <code class="language-plaintext highlighter-rouge">.env</code>​ 文件集中管理路径配置，并使用 <code class="language-plaintext highlighter-rouge">dotenv</code>​ 库在代码中加载这些配置。</p> <h4 id="示例">示例</h4> <ol> <li> <p><strong>创建</strong> <strong>​<code class="language-plaintext highlighter-rouge">.env</code>​</strong>​ <strong>文件</strong>：</p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">PROJECT_ROOT</span><span class="p">=</span><span class="s">/path/to/your/project</span>
</code></pre></div> </div> </li> <li> <p><strong>在代码中加载</strong> <strong>​<code class="language-plaintext highlighter-rouge">.env</code>​</strong>​ <strong>文件</strong>：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span><span class="p">,</span> <span class="n">find_dotenv</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="c1"># 自动找到项目根目录中的 .env 文件
# find_dotenv() 会从当前工作目录向上搜索 .env 文件，直到找到为止。
# 只需要确保 .env 文件在项目根目录下，代码会自动定位。
</span><span class="n">dotenv_path</span> <span class="o">=</span> <span class="nf">find_dotenv</span><span class="p">()</span>
<span class="nf">load_dotenv</span><span class="p">(</span><span class="n">dotenv_path</span><span class="p">)</span>

<span class="c1"># 从环境变量中获取项目根目录
</span><span class="n">PROJECT_ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">PROJECT_ROOT</span><span class="sh">"</span><span class="p">))</span>

<span class="c1"># 拼接子目录
</span><span class="n">DATA_RAW</span> <span class="o">=</span> <span class="n">PROJECT_ROOT</span> <span class="o">/</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span> <span class="o">/</span> <span class="sh">"</span><span class="s">raw</span><span class="sh">"</span>
</code></pre></div> </div> </li> </ol> <h4 id="优点-4">优点</h4> <ul> <li><code class="language-plaintext highlighter-rouge">.env</code>​ 文件方便版本控制和跨环境配置。</li> <li>避免将路径硬编码到代码中。</li> </ul> <h2 id="其他">其他</h2> <ol> <li> <p>为了统一路径中的斜杠，可以使用<code class="language-plaintext highlighter-rouge">os.path.normpath</code>函数将路径标准化。这个函数会将路径中的斜杠统一为当前操作系统的标准分隔符（在 Windows 中是反斜杠<code class="language-plaintext highlighter-rouge">\</code>，在 Linux/macOS 中是斜杠<code class="language-plaintext highlighter-rouge">/</code>）。</p> </li> <li>可以使用<code class="language-plaintext highlighter-rouge">os.path.relpath(file, root_path)</code>提取<code class="language-plaintext highlighter-rouge">file</code>相对文件根目录<code class="language-plaintext highlighter-rouge">root_path</code>的相对路径，<code class="language-plaintext highlighter-rouge">file</code>应该是包含<code class="language-plaintext highlighter-rouge">root_path</code>的完整路径。</li> <li>确保目标目录存在<code class="language-plaintext highlighter-rouge">os.makedirs(path exist_ok=True)</code>，不存在即创建。</li> </ol>]]></content><author><name></name></author><category term="Code"/><category term="Python"/><category term="AdvancedTips"/><summary type="html"><![CDATA[规范的路径管理方法]]></summary></entry><entry><title type="html">Conda-Pyenv-Poetry 多轨管理 Python 环境</title><link href="https://waynexucn.github.io//blog/2024/%E5%A4%9A%E8%BD%A8%E7%AE%A1%E7%90%86Python%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/" rel="alternate" type="text/html" title="Conda-Pyenv-Poetry 多轨管理 Python 环境"/><published>2024-02-09T13:08:36+00:00</published><updated>2024-02-09T13:08:36+00:00</updated><id>https://waynexucn.github.io//blog/2024/%E5%A4%9A%E8%BD%A8%E7%AE%A1%E7%90%86Python%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86</id><content type="html" xml:base="https://waynexucn.github.io//blog/2024/%E5%A4%9A%E8%BD%A8%E7%AE%A1%E7%90%86Python%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/"><![CDATA[<h2 id="背景">背景</h2> <p>Python 项目类型很多：从简单的数据分析、深度学习到 Web 开发和应用构建，每种类型对版本、环境和依赖的要求各不相同。</p> <p>对于简单的项目，pip 就可以满足需求。但随着数据科学项目或应用构建项目的扩大，各项目的 Python 版本和环境间的差异越来越大，conda 虽然可以实现很好的环境管理，但它太「重」了，过于臃肿。无论是 Anaconda 还是 miniconda 都存在安装依赖库过于激进的问题，使得项目环境占用空间动辄 5-6G，出现不必要膨胀。</p> <p>因此，我将我的需求分为两类。一类是用 Python 写一些数据科学相关的项目，可以使用 conda 让多个类似的项目共用一个虚拟环境，这对动辄几个 G 的机器学习依赖的管理，非常重要。另一类，是用 Python 写一些小项目，可能是 Web、爬虫，也可能是纯 Python 实现，这个时候我仅仅需要安装我需要的依赖，同时不同项目可能对 Python 的版本有要求。这时候再用 conda 就很不明智了。</p> <p>为了满足以上需求，经过一系列调研，最终确定了三个工具共同来管理我的 Python 环境：<code class="language-plaintext highlighter-rouge">Conda</code>、<code class="language-plaintext highlighter-rouge">Pyenv</code>、<code class="language-plaintext highlighter-rouge">Poetry</code>。</p> <p>最终的目标为：</p> <ul> <li><code class="language-plaintext highlighter-rouge">Pyenv</code>管理系统全局的 Python 版本，新 shell-session 的 Python 由<code class="language-plaintext highlighter-rouge">Pyenv</code>接管。</li> <li><code class="language-plaintext highlighter-rouge">Conda</code>负责建立可以让多个类似项目公用的虚拟环境，新 shell-session 不再默认激活 base 或者其他 Conda 环境。</li> <li><code class="language-plaintext highlighter-rouge">Poetry</code>为不同项目建立轻便独立的虚拟环境，其 Python 版本依赖 Pyenv。</li> </ul> <blockquote> <p>2024.11.08 更新：使用<code class="language-plaintext highlighter-rouge">Rust</code>编写的 Python 包管理器 <code class="language-plaintext highlighter-rouge">uv</code> 替代了<code class="language-plaintext highlighter-rouge">Pyenv</code>和<code class="language-plaintext highlighter-rouge">Poetry</code>的所有功能，更加快捷。</p> <p>2024.12.05 更新：<code class="language-plaintext highlighter-rouge">uv</code> 有点难用，还是用回<code class="language-plaintext highlighter-rouge">Pyenv</code>和<code class="language-plaintext highlighter-rouge">Poetry</code>。</p> </blockquote> <h2 id="组合优势">组合优势</h2> <h3 id="pyenv灵活切换-python-版本">Pyenv：灵活切换 Python 版本</h3> <ul> <li><strong>安装多个 Python 版本</strong>：不管是 Python 2 还是 Python 3，不同版本的 Python 在项目中的需求各不相同。通过 Pyenv，可以安装多个版本，选择一个作为全局版本，并在不同项目间快速切换。</li> <li><strong>项目独立版本控制</strong>：在每个项目的根目录下创建 <code class="language-plaintext highlighter-rouge">.python-version</code> 文件，设置每个项目专属的 Python 版本。这样，即使在不同项目间切换，也可以保证每个项目使用对应的 Python 版本。</li> </ul> <h4 id="安装与配置">安装与配置</h4> <ul> <li> <p><strong>PowerShell</strong> - easiest way （for windows）</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Invoke-WebRequest</span><span class="w"> </span><span class="nt">-UseBasicParsing</span><span class="w"> </span><span class="nt">-Uri</span><span class="w"> </span><span class="s2">"https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1"</span><span class="w"> </span><span class="nt">-OutFile</span><span class="w"> </span><span class="s2">"./install-pyenv-win.ps1"</span><span class="p">;</span><span class="w"> </span><span class="o">&amp;</span><span class="s2">"./install-pyenv-win.ps1"</span><span class="w">
</span></code></pre></div> </div> </li> <li>运行<code class="language-plaintext highlighter-rouge">pyenv --version</code>检查安装是否成功。</li> <li>运行<code class="language-plaintext highlighter-rouge">pyenv install --list</code>检查 pyenv-win 支持的 Python 版本列表。</li> <li>运行<code class="language-plaintext highlighter-rouge">pyenv install &lt;version&gt;</code>以安装支持的版本。</li> <li>运行<code class="language-plaintext highlighter-rouge">pyenv global &lt;version&gt;</code>以设置全局 Python 版本。</li> <li>在当前路径下运行<code class="language-plaintext highlighter-rouge">pyenv local &lt;version&gt;</code>以设置 Python 本地版本，将版本号写入当前目录下的<code class="language-plaintext highlighter-rouge">.python-version</code>文件的方式（优先级高于<code class="language-plaintext highlighter-rouge">global</code>）。</li> <li> <p>检查正在使用的 Python 版本及其路径。</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;</span><span class="w"> </span><span class="n">pyenv</span><span class="w"> </span><span class="nx">version</span><span class="w">
</span><span class="err">&lt;</span><span class="n">version</span><span class="err">&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">set</span><span class="w"> </span><span class="nx">by</span><span class="w"> </span><span class="nx">\path\to\.pyenv\pyenv-win\.python-version</span><span class="p">)</span><span class="w">
</span></code></pre></div> </div> </li> <li> <p>检查 Python 是否允许正常。</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;</span><span class="w"> </span><span class="n">python</span><span class="w"> </span><span class="nt">-c</span><span class="w"> </span><span class="s2">"import sys; print(sys.executable)"</span><span class="w">
</span><span class="n">\path\to\.pyenv\pyenv-win\versions\</span><span class="err">&lt;</span><span class="nx">version</span><span class="err">&gt;</span><span class="nx">\python.exe</span><span class="w">
</span></code></pre></div> </div> </li> </ul> <h3 id="conda适合数据科学和深度学习的环境管理工具">Conda：适合数据科学和深度学习的环境管理工具</h3> <ul> <li><strong>环境隔离</strong>：Conda 可以创建完全隔离的环境，每个环境中的依赖互不影响，避免了包版本冲突的问题。</li> <li><strong>科学计算和深度学习</strong>：Conda 在这些领域有专门优化的库版本，比如 GPU 支持的 TensorFlow 和 PyTorch。</li> <li><strong>多语言支持</strong>：不仅可以管理 Python 包，也支持 R、Ruby 等语言的包。</li> </ul> <h4 id="安装与配置-1">安装与配置</h4> <p>这里使用的是针对 conda-forge 的 Conda 和 Mamba 的最小安装程序 Miniforge，预配置了以下功能：</p> <ul> <li>基础环境中的包来自 conda-forge 频道。</li> <li>conda-forge 频道被设置为默认（也是唯一）的频道。</li> </ul> <p>Miniforge 安装程序在此处可用：<a href="https://github.com/conda-forge/miniforge/releases">https://github.com/conda-forge/miniforge/releases</a></p> <p>在 Windows 上，Miniforge 默认不会添加到系统路径中。</p> <ul> <li>在这种情况下，从普通命令提示符中无法使用 conda / mamba，除非提供可执行文件的完整路径，例如<code class="language-plaintext highlighter-rouge">C:\Users\myusername\miniforge3\condabin\conda</code>。相反，建议使用从开始菜单可用的 Miniforge Prompt。</li> <li>如果需要，在安装后可以手动将<code class="language-plaintext highlighter-rouge">C:\Users\myusername\miniforge3\condabin</code>文件夹添加到路径环境变量中，以便更方便地从任何命令提示符中使用该软件，并尽可能减少软件冲突的机会。</li> </ul> <blockquote> <p><strong>注意一</strong>：</p> <p>环境配置还需要关闭自动激活 base 环境 <code class="language-plaintext highlighter-rouge">conda config --set auto_activate_base false</code>。 这样每次打开终端默认的都是 pyenv 提供的 Python，而非 conda 的 base 环境了。</p> </blockquote> <blockquote> <p><strong>注意二</strong>：</p> <p>默认情况下，Windows PowerShell 在启动时会加载 conda 的路径。因此，我们需要确保 pyenv 的 Python 在 PATH 中优先于 conda。 即将 pyenv 的路径移动到 Path 的最前面，确保它优先于 conda 的路径。</p> </blockquote> <h3 id="poetry依赖管理和项目打包的理想工具">Poetry：依赖管理和项目打包的理想工具</h3> <p>Poetry 轻便且强大，使用 pyproject.toml 和 poetry.lock 文件来管理依赖，类似于 JavaScript/Node.js 的 Npm 和 Rust 的 Cargo，这俩都是非常成熟好用的依赖管理方案。 因其本身并不具有管理 Python 解释器的功能，因此推荐和 pyenv/pyenv-win 一起使用，可以轻松下载和设置不同版本的 Python 解释器。</p> <ul> <li><strong>依赖解析和锁定</strong>：Poetry 会自动解析和锁定依赖，避免不同版本之间的兼容性问题。</li> <li><strong>项目打包和发布</strong>：可以直接把项目打包并发布到 PyPI，适合需要发布的小型工具或 Web 应用。</li> <li><strong>自动创建虚拟环境</strong>：Poetry 可以在项目目录中自动创建虚拟环境，简化了环境配置过程。</li> </ul> <h4 id="安装与配置-2">安装与配置</h4> <p><a href="https://github.com/pypa/pipx">pipx</a> 用于全局安装 Python CLI 应用程序，同时仍将它们隔离在虚拟环境中。pipx 当用于安装 Poetry 时将管理升级和卸载。</p> <ul> <li>如果 pipx 还未安装，您可以按照官方 pipx 安装说明中的任何一种选项进行操作。任何非古老版本的 pipx 都可以。</li> <li> <p>使用 pipx 安装 Portry</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pipx</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">poetry</span><span class="w">
</span></code></pre></div> </div> </li> </ul> <h2 id="总结">总结</h2> <ul> <li><strong>Pyenv</strong>：负责 Python 版本管理，解决不同项目对 Python 版本的需求。</li> <li><strong>Conda</strong>：适合数据科学、深度学习等依赖复杂的项目，确保环境隔离和依赖兼容。</li> <li><strong>Poetry</strong>：用于依赖管理和打包，适合 Web 开发和小型应用项目，支持依赖锁定和发布。</li> </ul>]]></content><author><name></name></author><category term="Productivity"/><category term="Python"/><category term="Ubuntu"/><category term="Windows"/><summary type="html"><![CDATA[不同需求下的 Python 环境管理方法]]></summary></entry><entry><title type="html">Python 高级用法记录</title><link href="https://waynexucn.github.io//blog/2022/Python%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/" rel="alternate" type="text/html" title="Python 高级用法记录"/><published>2022-02-21T15:12:00+00:00</published><updated>2022-02-21T15:12:00+00:00</updated><id>https://waynexucn.github.io//blog/2022/Python%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95</id><content type="html" xml:base="https://waynexucn.github.io//blog/2022/Python%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/"><![CDATA[<p>优雅的 Python 代码，高级的使用技巧</p> <h1 id="小技巧">小技巧</h1> <ul> <li>省略号<code class="language-plaintext highlighter-rouge">…</code>可以代替<code class="language-plaintext highlighter-rouge"> pass</code>，同时还是 Numpy 的一个语法糖</li> </ul> <pre><code class="language-Python"># ...也是一个Python对象
def func():
    ...

def func():
    pass

</code></pre> <ul> <li><code class="language-plaintext highlighter-rouge">sum()</code>函数计算可迭代对象（例如列表、元组或集合）中所有数值的总和，还可以连接多个列表。</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nc">Sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span> <span class="c1"># 提供可选的 start 参数，以将数字添加到总和
</span><span class="mi">13</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">sum</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">),</span> <span class="p">[])</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</code></pre></div></div> <ul> <li>用<code class="language-plaintext highlighter-rouge">_</code>辅助标识，可以使大数变得更易于阅读</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">number</span><span class="o">=</span><span class="mi">123_456_789</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">number</span>
<span class="mi">281028344</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Code"/><category term="Python"/><category term="AdvancedTips"/><summary type="html"><![CDATA[优雅的 Python]]></summary></entry></feed>