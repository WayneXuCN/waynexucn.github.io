<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://waynexucn.github.io//feed/by_tag/AdvancedTips.xml" rel="self" type="application/atom+xml"/><link href="https://waynexucn.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-05T07:44:16+00:00</updated><id>https://waynexucn.github.io//feed/by_tag/AdvancedTips.xml</id><title type="html">Wenjie Xu</title><subtitle>Wenjie Xu&apos;s home page. feedId:113833929030099968+userId:72841831310508032 </subtitle><entry><title type="html">Python 项目中高效管理路径的范式</title><link href="https://waynexucn.github.io//blog/2024/Python%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E8%B7%AF%E5%BE%84%E7%9A%84%E8%8C%83%E5%BC%8F/" rel="alternate" type="text/html" title="Python 项目中高效管理路径的范式"/><published>2024-07-15T22:18:35+00:00</published><updated>2024-07-15T22:18:35+00:00</updated><id>https://waynexucn.github.io//blog/2024/Python%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E8%B7%AF%E5%BE%84%E7%9A%84%E8%8C%83%E5%BC%8F</id><content type="html" xml:base="https://waynexucn.github.io//blog/2024/Python%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E8%B7%AF%E5%BE%84%E7%9A%84%E8%8C%83%E5%BC%8F/"><![CDATA[<h1 id="python-项目中高效管理路径的范式">Python 项目中高效管理路径的范式</h1> <p>在 Python 项目中，代码需要频繁读取数据文件、配置文件或输出日志文件。如果直接使用硬编码路径或者频繁拼接相对路径，不仅代码冗长，还容易因路径错误而导致程序崩溃。为了解决这些问题，记录一套规范的路径管理方法，可以提升代码的可读性、维护性和跨平台兼容性。</p> <h2 id="路径管理的四种方法">路径管理的四种方法</h2> <h3 id="1-设置项目的根目录">1. 设置项目的根目录</h3> <p>将项目的根目录（Project Root）作为路径管理的基准，所有其他路径都从这个基准出发，而不是依赖每个文件的相对路径。通过动态计算项目根目录的位置，例如：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="c1"># 通过当前文件（如 paths.py）定位到项目根目录，叠加多个 parent
</span><span class="n">PROJECT_ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">__file__</span><span class="p">).</span><span class="nf">resolve</span><span class="p">().</span><span class="n">parent</span><span class="p">.</span><span class="n">parent</span>
<span class="c1"># PROJECT_ROOT = Path.cwd().resolve().parent.parent
</span></code></pre></div></div> <h4 id="优点">优点</h4> <ul> <li>不依赖环境变量，适应不同开发环境。</li> <li>路径管理从统一基准出发，逻辑清晰。</li> </ul> <hr/> <h3 id="2-使用环境变量配置项目根目录">2. 使用环境变量配置项目根目录</h3> <p>通过环境变量（如 <code class="language-plaintext highlighter-rouge">PYTHONPATH</code>​）配置项目根目录，所有路径的计算基于该环境变量。</p> <ol> <li> <p>在环境变量中添加项目根目录路径。</p> <ul> <li> <p><strong>Linux/MacOS</strong>：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span>/path/to/your/project
</code></pre></div> </div> </li> <li> <p><strong>Windows</strong>：</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">set</span><span class="w"> </span><span class="nx">PYTHONPATH</span><span class="o">=</span><span class="n">C:\path\to\your\project</span><span class="w">
</span></code></pre></div> </div> </li> </ul> </li> <li> <p>在代码中使用 <code class="language-plaintext highlighter-rouge">os.environ</code>​ 读取环境变量：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">osfrom</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span><span class="c1"># 从环境变量中获取项目根目录 PROJECT_ROOT = Path(os.environ["PYTHONPATH"])
</span></code></pre></div> </div> </li> </ol> <h4 id="优点-1">优点</h4> <ul> <li>解耦代码与文件系统结构，路径管理更加灵活。</li> <li>特别适合跨环境（开发/生产）的部署场景。</li> </ul> <hr/> <h3 id="3-集中管理路径常用">3. 集中管理路径（常用）</h3> <p>创建一个专门的路径管理模块，将项目中所有重要的路径集中定义。在 <code class="language-plaintext highlighter-rouge">config/paths.py</code>​ 中定义常用路径：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="c1"># 项目根目录
</span><span class="n">PROJECT_ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">__file__</span><span class="p">).</span><span class="nf">resolve</span><span class="p">().</span><span class="n">parent</span><span class="p">.</span><span class="n">parent</span>

<span class="c1"># 数据文件夹
</span><span class="n">DATA_RAW</span> <span class="o">=</span> <span class="n">PROJECT_ROOT</span> <span class="o">/</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span> <span class="o">/</span> <span class="sh">"</span><span class="s">raw</span><span class="sh">"</span>
<span class="n">DATA_PROCESSED</span> <span class="o">=</span> <span class="n">PROJECT_ROOT</span> <span class="o">/</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span> <span class="o">/</span> <span class="sh">"</span><span class="s">processed</span><span class="sh">"</span>

<span class="c1"># 日志文件夹
</span><span class="n">LOGS</span> <span class="o">=</span> <span class="n">PROJECT_ROOT</span> <span class="o">/</span> <span class="sh">"</span><span class="s">logs</span><span class="sh">"</span>

<span class="c1"># 结果文件夹
</span><span class="n">RESULTS</span> <span class="o">=</span> <span class="n">PROJECT_ROOT</span> <span class="o">/</span> <span class="sh">"</span><span class="s">results</span><span class="sh">"</span>
</code></pre></div></div> <p>在其他模块中引用：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">config.paths</span> <span class="kn">import</span> <span class="n">DATA_RAW</span>

<span class="n">file_path</span> <span class="o">=</span> <span class="n">DATA_RAW</span> <span class="o">/</span> <span class="sh">"</span><span class="s">data.txt</span><span class="sh">"</span>
<span class="k">with</span> <span class="n">file_path</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
</code></pre></div></div> <h4 id="优点-2">优点</h4> <ul> <li>路径定义集中管理，修改目录结构时无需逐个调整代码。</li> <li>增强代码的可读性和模块化程度。</li> </ul> <hr/> <h3 id="4-使用动态路径管理工具">4. 使用动态路径管理工具</h3> <p>利用 Python 标准库或第三方工具（如 <code class="language-plaintext highlighter-rouge">importlib.resources</code>​）来动态管理项目内的文件路径，尤其适合读取静态资源文件。</p> <ul> <li> <p><strong>​<code class="language-plaintext highlighter-rouge">importlib.resources</code>​</strong>​（适用于 Python 3.9+）：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">importlib.resources</span> <span class="kn">import</span> <span class="n">files</span>

<span class="c1"># 获取文件路径
</span><span class="n">file_path</span> <span class="o">=</span> <span class="nf">files</span><span class="p">(</span><span class="sh">"</span><span class="s">data.raw</span><span class="sh">"</span><span class="p">)</span> <span class="o">/</span> <span class="sh">"</span><span class="s">data.txt</span><span class="sh">"</span>

<span class="c1"># 读取文件
</span><span class="k">with</span> <span class="n">file_path</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
</code></pre></div> </div> </li> <li> <p><strong>​<code class="language-plaintext highlighter-rouge">pkg_resources</code>​</strong>​（传统方法）：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pkg_resources</span> <span class="kn">import</span> <span class="n">resource_filename</span>

<span class="c1"># 获取文件路径
</span><span class="n">file_path</span> <span class="o">=</span> <span class="nf">resource_filename</span><span class="p">(</span><span class="sh">"</span><span class="s">data.raw</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">data.txt</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 读取文件
</span><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
</code></pre></div> </div> </li> </ul> <h4 id="优点-3">优点</h4> <ul> <li>文件路径动态计算，支持打包和分发。</li> <li>避免直接硬编码路径，增强代码的通用性。</li> </ul> <hr/> <h2 id="路径管理的高级实践使用env文件管理环境变量">路径管理的高级实践：使用<code class="language-plaintext highlighter-rouge">.env</code>文件管理环境变量</h2> <p>通过 <code class="language-plaintext highlighter-rouge">.env</code>​ 文件集中管理路径配置，并使用 <code class="language-plaintext highlighter-rouge">dotenv</code>​ 库在代码中加载这些配置。</p> <h4 id="示例">示例</h4> <ol> <li> <p><strong>创建</strong> <strong>​<code class="language-plaintext highlighter-rouge">.env</code>​</strong>​ <strong>文件</strong>：</p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">PROJECT_ROOT</span><span class="p">=</span><span class="s">/path/to/your/project</span>
</code></pre></div> </div> </li> <li> <p><strong>在代码中加载</strong> <strong>​<code class="language-plaintext highlighter-rouge">.env</code>​</strong>​ <strong>文件</strong>：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span><span class="p">,</span> <span class="n">find_dotenv</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="c1"># 自动找到项目根目录中的 .env 文件
# find_dotenv() 会从当前工作目录向上搜索 .env 文件，直到找到为止。
# 只需要确保 .env 文件在项目根目录下，代码会自动定位。
</span><span class="n">dotenv_path</span> <span class="o">=</span> <span class="nf">find_dotenv</span><span class="p">()</span>
<span class="nf">load_dotenv</span><span class="p">(</span><span class="n">dotenv_path</span><span class="p">)</span>

<span class="c1"># 从环境变量中获取项目根目录
</span><span class="n">PROJECT_ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">PROJECT_ROOT</span><span class="sh">"</span><span class="p">))</span>

<span class="c1"># 拼接子目录
</span><span class="n">DATA_RAW</span> <span class="o">=</span> <span class="n">PROJECT_ROOT</span> <span class="o">/</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span> <span class="o">/</span> <span class="sh">"</span><span class="s">raw</span><span class="sh">"</span>
</code></pre></div> </div> </li> </ol> <h4 id="优点-4">优点</h4> <ul> <li><code class="language-plaintext highlighter-rouge">.env</code>​ 文件方便版本控制和跨环境配置。</li> <li>避免将路径硬编码到代码中。</li> </ul> <h2 id="其他">其他</h2> <ol> <li> <p>为了统一路径中的斜杠，可以使用<code class="language-plaintext highlighter-rouge">os.path.normpath</code>函数将路径标准化。这个函数会将路径中的斜杠统一为当前操作系统的标准分隔符（在 Windows 中是反斜杠<code class="language-plaintext highlighter-rouge">\</code>，在 Linux/macOS 中是斜杠<code class="language-plaintext highlighter-rouge">/</code>）。</p> </li> <li>可以使用<code class="language-plaintext highlighter-rouge">os.path.relpath(file, root_path)</code>提取<code class="language-plaintext highlighter-rouge">file</code>相对文件根目录<code class="language-plaintext highlighter-rouge">root_path</code>的相对路径，<code class="language-plaintext highlighter-rouge">file</code>应该是包含<code class="language-plaintext highlighter-rouge">root_path</code>的完整路径。</li> <li>确保目标目录存在<code class="language-plaintext highlighter-rouge">os.makedirs(path exist_ok=True)</code>，不存在即创建。</li> </ol>]]></content><author><name></name></author><category term="Code"/><category term="Python"/><category term="AdvancedTips"/><summary type="html"><![CDATA[规范的路径管理方法]]></summary></entry><entry><title type="html">Python 高级用法记录</title><link href="https://waynexucn.github.io//blog/2022/Python%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/" rel="alternate" type="text/html" title="Python 高级用法记录"/><published>2022-02-21T15:12:00+00:00</published><updated>2022-02-21T15:12:00+00:00</updated><id>https://waynexucn.github.io//blog/2022/Python%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95</id><content type="html" xml:base="https://waynexucn.github.io//blog/2022/Python%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%E8%AE%B0%E5%BD%95/"><![CDATA[<p>优雅的 Python 代码，高级的使用技巧</p> <h1 id="小技巧">小技巧</h1> <ul> <li>省略号<code class="language-plaintext highlighter-rouge">…</code>可以代替<code class="language-plaintext highlighter-rouge"> pass</code>，同时还是 Numpy 的一个语法糖</li> </ul> <pre><code class="language-Python"># ...也是一个Python对象
def func():
    ...

def func():
    pass

</code></pre> <ul> <li><code class="language-plaintext highlighter-rouge">sum()</code>函数计算可迭代对象（例如列表、元组或集合）中所有数值的总和，还可以连接多个列表。</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nc">Sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span> <span class="c1"># 提供可选的 start 参数，以将数字添加到总和
</span><span class="mi">13</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">sum</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">),</span> <span class="p">[])</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</code></pre></div></div> <ul> <li>用<code class="language-plaintext highlighter-rouge">_</code>辅助标识，可以使大数变得更易于阅读</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">number</span><span class="o">=</span><span class="mi">123_456_789</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">number</span>
<span class="mi">281028344</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Code"/><category term="Python"/><category term="AdvancedTips"/><summary type="html"><![CDATA[优雅的 Python]]></summary></entry></feed>